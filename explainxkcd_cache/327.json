{
    "comic_number": 327,
    "explanation": "{{comic\n| number    = 327\n| date      = October 10, 2007\n| title     = Exploits of a Mom\n| image     = exploits_of_a_mom.png\n| titletext = Her daughter is named Help I'm trapped in a driver's license factory.\n}}\n\n==Explanation==\n[[Mrs. Roberts]] receives a call from her son's school. The caller, likely one of the school's administrators, asks if she really named her son Robert'); DROP TABLE Students;--, a rather unusual name. Perhaps surprisingly, Mrs. Roberts responds in the affirmative, claiming that she uses the nickname \"[[Little Bobby Tables]].\" As the full name is read into the school's system's databases without {{w|Data sanitization#SQL injection|data sanitization}}, it causes the \"Students\" table in the database to be dropped, meaning it gets deleted.\n\nThis comic was a prequel for the [[:Category:1337|1337 series]] where the entire family is shown for the first time. The title of this comic is a pun: \"exploit\" can mean an accomplishment or heroic deed, but in computer science, the term refers to a program or technique that takes advantage of a vulnerability in other software. The title can also refer to her choice of name for her son, which is rather extraordinary. In {{w|SQL}}, a database programming language, commands are separated by semicolons <code>;</code>, and strings of text are often delimited using single quotes <code>'</code>. Parts of commands may also be enclosed in parentheses <code>(</code> and <code>)</code>. Data entries are stored as \"rows\" within named \"tables\" of similar items (e.g., <code>Students</code>). The command to delete an entire table (and thus every row of data in that table) is <code>DROP TABLE</code>, as in <code>DROP TABLE Students;</code>. In [[1253: Exoplanet Names]], someone (presumably Mrs. Roberts) attempts to perform a similar trick, submitting the name <code>e'); DROP TABLE PLANETS;--</code> to the IAU.\n\nThe exploited vulnerability here is that the single quote in the name input was not correctly \"escaped\" by the software. That is, if a student's name did indeed contain a quote mark, it should have been read as one of the characters making up the text string and not as the marker to close the string, which it erroneously was. Lack of careful parsing is a common SQL vulnerability; this type of exploit is referred to as {{w|SQL injection}}. Mrs. Roberts thus reminds the school to make sure that they have added data filtering code to prevent code injection exploits in the future.\n\nFor example, to add information about Elaine to a data table called 'Students', the SQL query could be:\n<br><code>INSERT INTO Students (firstname) VALUES ('Elaine');</code>\n\nHowever, using the odd name <code>Robert');DROP TABLE Students;--&nbsp;</code> where we used \"Elaine\" above, the SQL query becomes:\n<br><code>INSERT INTO Students (firstname) VALUES ('Robert');DROP TABLE Students;--&nbsp;');</code>\n\nBy insertion of the two semi-colons in the odd name, this is now three well-formed SQL commands:\n<br><code>\nINSERT INTO Students (firstname) VALUES ('Robert');\n\nDROP TABLE Students;\n\n--&nbsp;');\n</code>\n\nThe first line is valid SQL code that will legitimately insert data about a student named Robert. The second line is valid injected SQL code that will delete the whole Students data table from the database. The third line is a valid code comment (<code>--&nbsp;</code> denotes a comment), which will cause the rest of the line to be ignored by the SQL server. For this to work, it helps to know the structure of the database. But it's quite a good guess that a school's student management database might have a table named <code>Students</code>. \n\nOf course, in real life, most exploits of this kind would be performed not by engineering a person's name such that it would eventually be entered into a school database query, but rather by accessing some kind of input system (such as a website's login screen or search interface) and guessing various combinations by trial and error until something works, perhaps by first trying to inject the <code>SHOW TABLES;</code> command to see how the database is structured. In 2019, a person chose a vanity license plate that said \"NULL\" and subsequently [https://www.wired.com/story/null-license-plate-landed-one-hacker-ticket-hell/ received thousands of dollars in fines from random vehicles] for which the license plate was unavailable. Some database programmers somewhere along the way failed to consider the difference between the string NULL and the value {{w|NULL}}.\n\nIn 2017, a Swiss group called their book \"<script>alert(\"!Mediengruppe Bitnik\");</script>\" to make e-commerce websites display an innocuous pop-up as soon as the book name loads. [https://i.imgur.com/Dd4XN7d.png It immediately worked on several sites] and to this day, [https://www.tomlinsons-online.com/p-16381221-scriptalertmediengruppe-bitnikscript.aspx some websites] are still affected. In 2020, the British corporate register [https://forum.aws.chdev.org/t/cross-site-scripting-xss-software-attack/3355/8 accepted a registration] for \"&quot;&gt;&lt;SRC=<nowiki>H</nowiki>TTPS://MJT.XSS.HT&gt; LTD\", which was soon officially renamed \"THAT COMPANY WHOSE NAME USED TO CONTAIN HTML SCRIPT TAGS LTD\" to avoid a cross-site scripting problem.\n\nTo include the odd name correctly and harmlessly in the Students table in the school database the correct SQL is:\n<br><code>INSERT INTO Students (firstname) VALUES ('Robert<nowiki>''</nowiki>);DROP TABLE Students;--&nbsp;');</code>\n\nNote that the single quote after Robert is now sanitized by doubling it, which changes it from malicious code to harmless data, and the full first 'name' of the student <code>Robert');DROP TABLE Students;--</code> is now stored correctly. It should be noted that while data sanitization can mitigate the risks of SQL injection, the proper prevention technique is to use {{w|Prepared statement}}s. Noting the difference between the \"actual\" name using the word TABLE and the child's nickname being Bobby Tables, one could argue that there's an implied reference to one of the most argued topics of database naming conventions - should table names be singular or plural.\n\nThe title text references that Mrs. Roberts' daughter is named \"Help I'm trapped in a driver's license factory\". This is a play on how if someone is stuck and forced to work in a manufacturing factory/plant, then they will write on the product {{tvtropes|HelpHelpTrappedInTitleFactory|\"Help I'm trapped in a ____ factory\"}} in order to tell people on the outside. Having this name would cause any police officer who pulls her over to show some concern towards the hypothetical artesan who created the identification. And getting the license in the first place would likely be difficult. The idea of inserting a help message like this was already used in [[10: Pi Equals]]. It was later revealed that the daughter's middle and last names (which she more generally was known by) together are \"[[Elaine Roberts]]\".\n<!-- Help I'm trapped in a Wiki markup code editing facility! -->\n\n==Transcript==\n:[Mrs. Roberts receives a call from her son's school on her wireless phone. She is standing with a cup of hot coffee or tea (shown with a small line above the cup) facing a small round three-legged table to the right. The voice of the caller is indicated to come from the phone with a zigzag line.]\n:Voice over the phone: Hi, This is your son's school. We're having some computer trouble.\n\n:[In this frame-less panel Mrs. Roberts has put the cup down on the table turned facing out.]\n:Mrs. Roberts: Oh, dear &ndash; did he break something?\n:Voice over the phone: In a way &ndash;\n\n:[Mrs. Roberts is now drinking from the cup again looking right. The table is not shown.]\n:Voice over the phone: Did you really name your son <code>Robert'); DROP TABLE Students;--</code> ?\n:Mrs. Roberts: Oh, yes. Little Bobby Tables, we call him.\n\n:[Mrs. Roberts holds the cup down.]\n:Voice over the phone: Well, we've lost this year's student records. I hope you're happy.\n:Mrs. Roberts: And I hope you've learned to sanitize your database inputs.\n\n==Trivia==\n* This comic has become rather famous, spawning a site at http://bobby-tables.com about preventing SQL injection and also at the official [https://docs.python.org/2/library/sqlite3.html Python SQLite documentation]. Noted security expert {{w|Bruce Schneier}} (who often quotes xkcd) [https://www.schneier.com/blog/archives/2010/10/pen-and-paper_s.html mentioned a similar attack] that happened in the 2010 Swedish general elections, and [https://blog.xkcd.com/2010/05/03/color-survey-results/ several people tried it on Randall's color survey].\n* This is the first xkcd comic featuring [[Mrs. Roberts]], her daughter later names [[Elaine Roberts]], with the title text name as her middle names, and [[Little Bobby Tables]].\n* This comic used to be [https://web.archive.org/web/20220125023401/https://store.xkcd.com/products/signed-prints available as a signed print] in the xkcd store before it was [[Store|shut down]].\n\n{{comic discussion}}\n\n[[Category:Comics featuring Mrs. Roberts]]\n[[Category:Comics featuring Little Bobby Tables]]\n[[Category:Comics featuring Elaine Roberts]]\n[[Category:Programming]]\n[[Category:Computer security]]\n[[Category:Comics with xkcd store products]]\n[[Category:Comics with lowercase text]]"
}
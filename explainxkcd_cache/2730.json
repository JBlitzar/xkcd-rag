{
    "comic_number": 2730,
    "explanation": "{{comic\n| number    = 2730\n| date      = January 27, 2023\n| title     = Code Lifespan\n| image     = code_lifespan_2x.png\n| imagesize = 377x307px\n| noexpand  = true\n| titletext = Surely (no one/everyone) will (recognize how flexible and useful this architecture is/spend a huge amount of effort painstakingly preserving and updating this garbage I wrote in 20 minutes)\n}}\n\n==Explanation==\n\nThis comic contrasts two scenarios involving [[Ponytail]] writing a computer program: in the first panel, she has taken great care to future-proof her code, while in the second, she decides not to under the assumption it will soon be deprecated and/or replaced. The captions below each panel note that, ironically, code that ''was'' written with future-proofing in mind will often quickly cease to be used, defeating the purpose of future-proofing, while the code that was ''not'' will often be used much longer than the original programmer(s) intended. This is a {{w|Catch-22 (logic)|''Catch-22''}} situation that many developers have experienced; the first one even has a name, {{w|YAGNI}}.\n\nThe second panel could be an allusion to the {{w|Year 2000 problem}}, although it is important to note that problem was not simply due to developers not thinking ahead but also because the developers were working with extremely limited computer resources at the time, promoting the use of 2-digit years.\n\nThe title text is a modular sentence with two parentheticals, each containing two alternative phrases. This allows for four permutations of the sentence, each of which may be said by programmers. The following two permutations may be the hoped-for ideals of software developers:\n\n* \"Surely everyone will recognize how flexible and useful this architecture is.\"\n* \"Surely no one will spend a huge amount of effort painstakingly preserving and updating this garbage I wrote in 20 minutes.\"\n\nHowever, reality often falls short of such hopes, in that insufficient numbers of people recognize code intended for re-use, and far more people than intended will attempt to maintain and adapt sloppy work. The former can occur because of uncertain or unclear assumptions which aren't clear when the time comes to re-use code capable of it, and the latter sometimes happens because the corner-cutting peculiarities of hasty work are often seen as far deeper necessities than they actually are. The remaining two permutations express these far less hopeful outlooks:\n\n* \"Surely no one will recognize how flexible and useful this architecture is.\"\n* \"Surely everyone will spend a huge amount of effort painstakingly preserving and updating this garbage I wrote in 20 minutes.\"\n\n==Transcript==\n\n:[Two almost identical panels side by side depict a conversation between Ponytail and Cueball.]\n\n:[Ponytail standing next to Cueball, with her palm raised.]\n:Ponytail: It took some extra work to build, but now we'll be able to use it for all our future projects.\n\n:[Caption below the panel:]\n:How to ensure your code is never reused\n\n:[Nearly identical situation to the first, but with the arm raised slightly less emphatically.]\n:Ponytail: Let's not overthink it; if this code is still in use '''''that''''' far in the future, we'll have bigger problems.\n\n:[Caption below the panel:]\n:How to ensure your code lives forever\n\n{{comic discussion}}\n[[Category:Comics featuring Ponytail]]\n[[Category:Comics featuring Cueball]]\n[[Category:Programming]]"
}
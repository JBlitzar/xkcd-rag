{
    "comic_number": 2934,
    "explanation": "{{comic\n| number    = 2934\n| date      = May 17, 2024\n| title     = Bloom Filter\n| image     = bloom_filter_2x.png\n| imagesize = 212x206px\n| noexpand  = true\n| titletext = Sometimes, you can tell Bloom filters are the wrong tool for the job, but when they're the right one you can never be sure.\n}}\n\n==Explanation==\nThe comic is about a data structure called a {{w|Bloom filter}}. Software engineers use Bloom filters to check if something is probably in a set or to estimate how many things are in that set, using limited memory.\n\n* One example: the Chrome web browser used to store a Bloom filter of URLs that were known to be malicious,<ref>Chromium Issue 10896048: Transition safe browsing from bloom filter to prefix set. (Closed) – https://chromiumcodereview.appspot.com/10896048/</ref> based on a database that was too large to store locally. Chrome used that Bloom filter to confirm that it didn’t need to warn the user that they were visiting a malicious page. Only in the rare cases that the Bloom filter said the URL might be malicious, Chrome would send the URL to an external service to confirm whether it was known to be malicious. The developers didn’t want the browser to send ''every'' URL to the external service because that would leak the user’s entire browsing history to the service and would add an unnecessary network delay whenever a web page was loaded.\n\nHere's how a Bloom filter works:\n\n# ''' Adding items:''' When you add an item, it gets hashed (a way of transforming it into numbers) by several hash functions. These hash functions mark certain spots in a big array of bits (think of it as a row of lights that can be on or off).\n# ''' Checking items:''' To check whether an item might be in the set, you hash it with the same functions and see if all the corresponding spots are lit up. If they are, the item might be in the set, but there's a chance of a false positive (the Bloom filter could mistakenly say the item is there when it’s not). If any spot is not lit up, the item is not in the set.\n# '''False positives:''' The larger the array compared to the number of items, the lower the chance of false positives. For example, 10 bits per item gives each tested item a 0.1% chance of matching each item actually in the set.\n# ''' Counting items:''' By analyzing the activated bits, with appropriate calculations, you can derive an estimate of ''how many'' individual items are 'stored' for confirmation within the array. This estimate's accuracy will depend upon several factors, but more array bits (making themselves potentially available to 'remember' each item) will be one of the most important ones when it comes to narrowing down the likelihood.\n\nIn the comic, [[Cueball]] is holding a piece of paper or tablet computer with a large \"1\" digit on it. This is labeled as a 1-bit Bloom filter, which is almost useless. When empty, it correctly returns a negative for any item tested, but as soon as one item is added the bit is set to 1, and now it unhelpfully says that any item tested might be in the set. Its size estimate also becomes \"between 1 and infinity,\" which isn’t helpful.\n\nHaving multiple hash functions is pointless for a 1-bit filter since they all end up pointing to the same single bit, which would return the exact same answer as a result.\n\nThe title text carries the characteristics of the Bloom filter into the decision-making process for choosing a Bloom filter over other candidate data structures. Analogously (according to the text), you can be sure when they are ''not'' the best approach but only conclude that they ''are'' with a limited degree of probability.\n\n==Transcript==\n:[Ponytail holds out her hand to Cueball, who is holding a flat object with a 1 on it.]\n:Ponytail: Does your set contai–\n:Cueball: Yeah, probably.\n\n:[Caption below the panel:]\n:One-Bit Bloom Filter\n\n==Trivia==\n* The Bloom Filter was invented by Burton \"Buzz\" Bloom, who laughed when shown this comic and said \"It's been a long time since I've done filtering... about twenty years.\"{{Actual citation needed}}\n\n* Bloom Filters were also referenced in [[2739]] as a very lossy form of data compression.\n\n==References==\n<references/>\n\n{{comic discussion}}\n\n[[Category:Comics featuring Ponytail]]\n[[Category:Comics featuring Cueball]]\n[[Category:Statistics]]\n[[Category:Programming]]"
}
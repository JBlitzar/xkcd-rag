{
    "comic_number": 936,
    "explanation": "{{comic\n| number    = 936\n| date      = August 10, 2011\n| title     = Password Strength\n| image     = password strength.png\n| titletext = To anyone who understands information theory and security and is in an infuriating argument with someone who does not (possibly involving mixed case), I sincerely apologize.\n}}\n\n==Explanation==\nThis comic says that a password such as \"Tr0ub4dor&3\" is bad because it is easy for password cracking software and hard for humans to remember, leading to insecure practices like writing the password down on a post-it attached to the monitor. On the other hand, a password such as \"correct horse battery staple\" is hard for computers to guess due to having more entropy but quite easy for humans to remember.\n\n{{w|Entropy (information theory)|Entropy}} is a measure of \"uncertainty\" in an outcome. In this context, it can be thought of as a value representing how unpredictable the next character of a password is. It is calculated as ''log2(a^b)'' where ''a'' is the number of allowed symbols and ''b'' is its length.\n\nA truly random string of length 11 (not like \"Tr0ub4dor&3\", but more like \"J4I/tyJ&Acy\") has log2(94^11) = 72.1 bits, with 94 being the total number of letters, numbers, and symbols one can choose. However the comic shows that \"Tr0ub4dor&3\" has only 28 bits of entropy. This is because the password follows a simple pattern of a dictionary word + a couple extra numbers or symbols, hence the entropy calculation is more appropriately expressed with log2(65000*94*94), with 65000 representing a rough estimate of all dictionary words people are likely to choose. (For related info, see https://what-if.xkcd.com/34/).\n\nAnother way of selecting a password is to have 2048 \"symbols\" (common words) and select only 4 of those symbols. log2(2048^4) = 44 bits, much better than 28. Using such symbols was again visited in one of the tips in [[1820: Security Advice]].\n\nIt is absolutely true that people make passwords hard to remember because they think they are \"safer\", and it is certainly true that length, all other things being equal, tends to make for very strong passwords and this can be confirmed by using [https://rumkin.com/tools/password/passchk.php rumkin.com's password strength checker]. Even if the individual characters are all limited to [a-z], the exponent implied in \"we added another lowercase character, so multiply by 26 again\" tends to dominate the results. That's before using ''all'' symbols of [https://www.ascii-code.com/ ascii], [https://www.ascii-code.com/ html] and [https://symbl.cc/ru/unicode-table/#cjk-unified-ideographs-extension-b unicode].\n\nIn addition to being easier to remember, long strings of lowercase characters are also easier to type on smartphones and {{w|Virtual keyboard|soft keyboards}}.\n\nxkcd's password generation scheme requires the user to have a list of 2048 common words (log<sub>2</sub>(2048) = 11). For any attack we must assume that the attacker knows our password generation algorithm, but not the exact password. In this case the attacker knows the 2048 words, and knows that we selected 4 words, but not which words. The number of combinations of 4 words from this list of words is (2<sup>11</sup>)<sup>4</sup> = 2<sup>44</sup>, i.e. 44 bits. For comparison, the [https://world.std.com/~reinhold/dicewarefaq.html#calculatingentropy entropy offered by Diceware's 7776 word list is 13 bits per word]. If the attacker doesn't know the algorithm used, and only knows that lowercase letters are selected, the \"common words\" password would take even longer to crack than depicted. 25 ''random'' lowercase characters would have [https://www.wolframalpha.com/input/?i=log2%2826^25%29 117 bits of entropy], vs 44 bits for the common words list.\n\n;Example\nBelow there is a detailed example which shows how different rules of complexity work to generate a password with supposed 44 bits of entropy. The examples of expected passwords were generated in random.org.(*)\n\nIf ''n'' is the number of symbols and ''L'' is the length of the password, then ''L'' = 44 / log<sub>2</sub>(n).\n\n{|class=\"wikitable\"\n!Symbols\n!Number of symbols\n!Minimum length\n!colspan=\"2\"|Examples of expected passwords\n!Example of an actual password\n!Actual bits of entropy\n!Comment\n|-\n|a||26||9.3||mdniclapwz||jxtvesveiv||troubadorx||16+4.7 = 20.7||Extra letter to meet length requirement; log<sub>2</sub>(26) = 4.7\n|-\n|rowspan=\"2\"|a 9\n|rowspan=\"2\"|36\n|rowspan=\"2\"|8.5\n|rowspan=\"2\"|qih7cbrmd\n|rowspan=\"2\"|ewpltiayq\n|tr0ub4d0r||16+3=19||3 = common substitutions in the comic\n|-\n|troubador1||16+3.3=19.3||log<sub>2</sub>(10) = 3.3\n|-\n|a A||52||7.7||jAwwBYne||NeTvgcrq||Troubador||16+1=17||1 = caps? in the comic\n|-\n|a &amp;||58||7.5||j.h?nv),||c/~/fg\\:||troubador&amp;||16+4=20||4 = punctuation in the comic\n|-\n|a A 9||62||7.3||cDe8CgAf||RONygLMi||Tr0ub4d0r||16+1+3=20||1 = caps?; 3 = common substitutions\n|-\n|a 9 &amp;||68||7.2||_@~\"#^.2||un$l&#x7c;!f]||tr0ub4d0r&amp;||16+3+4=23||3 = common substitutions; 4 = punctuation\n|-\n|a A 9 &amp;||94||6.7||Re-:aRo||^$rV{3?||Tr0ub4d0r&||16+1+3+4=24||1 = caps?; 3 = common substitutions; 4 = punctuation\n|-\n|rowspan=\"2\"|common words\n|rowspan=\"2\"|2048\n|rowspan=\"2\"|4\n|rowspan=\"2\"|reasonable&#8203;retail&#8203;sometimes&#8203;possibly\n|rowspan=\"2\"|constant&#8203;yield&#8203;specify&#8203;priority||reasonable&#8203;retail&#8203;sometimes&#8203;possibly||11&times;4=44||Go to random.org and select 4 random integers between 1 and 2048; then go to your list of common words \n|-\n|correct&#8203;horse&#8203;battery&#8203;staple\n|0\n|Thanks to this comic, this is now one of the first passwords a hacker will try.\n|}\n\n:a = lowercase letters\n:A = uppercase letters\n:9 = digits\n:&amp; = the 32 special characters in an American keyboard; Randall assumes only the 16 most common characters are used in practice (4 bits)\n\n:(*)&nbsp;The use of random.org explains why <code>jAwwBYne</code> has two consecutive w's, why <code>Re-:aRo</code> has two R's, why <code>_@~\"#^.2</code> has no letters, why <code>ewpltiayq</code> has no numbers, why \"constant yield\" is part of a password, etc. A human would have attempted at passwords that looked random.\n\n==People who don't understand information theory and security==\n\nThe title text likely refers to the fact that this comic could cause people who understand information theory and agree with the message of the comic to get into an infuriating argument with people who do not — and disagree with the comic.\n\nIf you're confused, don't worry; you're in good company; even security \"experts\" don't understand the comic:\n\n*  Bruce Schneier thinks that dictionary attacks make this method \"obsolete\", despite the comic ''assuming'' perfect knowledge of the user's dictionary from the get-go.  He advocates his own low-entropy \"first letters of common plain English phrases\" method instead:  [https://www.schneier.com/blog/archives/2014/03/choosing_secure_1.html#:~:text=xkcd Schneier original article] and rebuttals: [https://web.archive.org/web/20160305001236/https://robinmessage.com/2014/03/why-bruce-schneier-is-wrong-about-passwords/ 1] [https://security.stackexchange.com/a/62881/10616 2] [https://www.reddit.com/r/technology/comments/1yxgqo/bruce_schneier_on_choosing_a_secure_password/cfp2z9k 3] [https://www.reddit.com/r/YouShouldKnow/comments/232uch/ysk_how_to_properly_choose_a_secure_password_the/cgte7lp 4] [https://www.reddit.com/r/YouShouldKnow/comments/232uch/ysk_how_to_properly_choose_a_secure_password_the/cgszp62 5] [https://www.reddit.com/r/YouShouldKnow/comments/232uch/ysk_how_to_properly_choose_a_secure_password_the/cgt6ohq 6]\n* Steve Gibson basically gets it, but calculates entropy incorrectly in order to promote his own method and upper-bound password-checking tool: [https://www.grc.com/sn/sn-313.htm#:~:text=math%20is%20wrong Steve Gibson Security Now transcript] and [https://subrabbit.wordpress.com/2011/08/26/how-much-entropy-in-that-password/ rebuttal]\n* Computer security consultant Mark Burnett ''almost'' understands the comic, but then advocates adding numerals and other crud to make passphrases less memorable, which completely defeats the point (that it is human-friendly) in the first place: [https://web.archive.org/web/20150319220514/https://xato.net/passwords/analyzing-the-xkcd-comic/ Analyzing the XKCD Passphrase Comic]\n* Ken Grady incorrectly thinks that user-selected sentences like \"I have really bright children\" have the same entropy as randomly-selected words: [https://www.hellersearch.com/blog/bid/141527/is-your-password-policy-stupid Is Your Password Policy Stupid?]\n* Diogo Mónica is correct that a truly random 8-character string is still stronger than a truly random 4-word string (52.4 vs 44), but doesn't understand that the words have to be truly random, not user-selected phrases like \"let me in facebook\":  [https://diogomonica.com/posts/password-security-why-the-horse-battery-staple-is-not-correct/ Password Security: Why the horse battery staple is not correct]\n* Ken Munro confuses entropy with permutations and undermines his own argument that \"correct horse battery staple\" is weak due to dictionary attacks by giving an example \"strong\" password that still consists of English words. He also doesn't realize that using capital letters in predictable places (first letter of every word) only  increases password strength by a bit (figuratively and literally): [https://www.pentestpartners.com/security-blog/correcthorsebatterystaple-isnt-a-good-password- heres-why/ CorrectHorseBatteryStaple isn’t a good password. Here’s why.]\n\n==Transcript==\n:The comic illustrates the relative strength of passwords assuming basic knowledge of the system used to generate them.\n:A set of boxes is used to indicate how many bits of entropy a section of the password provides.\n:The comic is laid out with 6 panels arranged in a 3x2 grid.\n:On each row, the first panel explains the breakdown of a password, the second panel shows how long it would take for a computer to guess, and the third panel provides an example scene showing someone trying to remember the password.\n\n:[The password \"Tr0ub4dor&3\" is shown in the center of the panel. A line from each annotation indicates the word section the comment applies to.]\n\n:Uncommon (non-gibberish) base word\n:[Highlighting the base word - 16 bits of entropy.]\n:Caps?\n:[Highlighting the first letter - 1 bit of entropy.]\n:Common Substitutions\n:[Highlighting the letters 'a' (substituted by '4') and both 'o's (the first of which is substituted by '0') - 3 bits of entropy.]\n:Punctuation\n:[Highlighting the symbol appended to the word - 4 bits of entropy.]\n:Numeral\n:[Highlighting the number appended to the word - 3 bits of entropy.]\n:Order unknown\n:[Highlighting the appended characters - 1 bit of entropy.]\n:(You can add a few more bits to account for the fact that this is only one of a few common formats.)\n\n:~28 bits of entropy \n:2<sup>28</sup> = 3 days at 1000 guesses/sec\n:(Plausible attack on a weak remote web service. Yes, cracking a stolen hash is faster, but it's not what the average user should worry about.)\n:Difficulty to guess: Easy\n\n:[Cueball stands scratching his head trying to remember the password.]\n:Cueball: Was it trombone? No, Troubador. And one of the O's was a zero?\n:Cueball: And there was some symbol...\n:Difficulty to remember: Hard\n\n:[The passphrase \"correct horse battery staple\" is shown in the center of the panel.]\n:Four random common words {Each word has 11 bits of entropy.}\n\n:~52 bits of entropy\n:2<sup>44</sup> = 550 years at 1000 guesses/sec\n:Difficulty to guess: Hard\n\n:[Cueball is thinking, in his thought bubble a horse is standing to one side talking to an off-screen observer. An arrow points to a staple attached to the side of a battery.]\n:Horse: That's a battery staple.\n:Observer: ''Correct!''\n:Difficulty to remember: You've already memorized it\n\n:Through 20 years of effort, we've successfully trained everyone to use passwords that are hard for humans to remember, but easy for computers to guess.\n\n==External links==\n*An [https://en.wikipedia.org/wiki/Request_for_Comments RFC], RFC7997 ''The Use of Non-ASCII Characters in RFCs'', uses \"Correct Horse Battery Staple\" in ''Table 3: A sample of legal passwords'' on page 10. [https://www.rfc-editor.org/rfc/pdfrfc/rfc7997.txt.pdf#page=10]\n*Some info was used from the highest voted answer given to the question of \"how accurate is this XKCD comic\" at StackExchange [https://security.stackexchange.com/questions/6095/xkcd-936-short-complex-password-or-long-dictionary-passphrase].\n*Similarly, a question of \"how right this comic is\" was made at AskMetaFilter [https://ask.metafilter.com/193052/Oh-Randall-you-do-confound-me-so] and [[Randall]] responded [https://ask.metafilter.com/193052/Oh-Randall-you-do-confound-me-so#2779020 there].\n*Also the Wikipedia article on '{{w|Passphrase}}' is useful.\n*In case you missed it in the explanation, GRC's Steve Gibson has a fantastic page [https://www.grc.com/haystack.htm] about this (and may have prompted this comic, as his podcast [https://www.grc.com/sn/sn-303.htm] about this was posted the month before this comic).\n* This comic inspired [https://blog.acolyer.org/2015/10/29/how-to-memorize-a-random-60-bit-string/ How to memorize a random 60-bit string] scientific paper (link is to the article about paper, with paper itself linked)\n* [https://github.com/dropbox/zxcvbn zxcvbn password strength estimator] thanks this comic for the inspiration in acknowledgements.\n* CMU paper: [https://cups.cs.cmu.edu/soups/2012/proceedings/a7_Shay.pdf Correct horse battery staple: Exploring the usability of system-assigned passphrases]\n* [https://www.microsoft.com/en-us/research/wp-content/uploads/2016/06/Microsoft_Password_Guidance-1.pdf Microsoft Password Guidance] (page 8)\n* [https://gizmodo.com/the-guy-who-invented-those-annoying-password-rules-now-1797643987 The Guy Who Invented Those Annoying Password Rules Now Regrets Wasting Your Time], August 8, 2017 (this comic is reproduced in the article).\n\n{{comic discussion}}\n[[Category:Comics featuring Cueball]]\n[[Category:Math]]\n[[Category:Computers]]\n[[Category:Psychology]]\n[[Category:Computer security]]"
}
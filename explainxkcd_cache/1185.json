{
    "comic_number": 1185,
    "explanation": "{{comic\n| number    = 1185\n| date      = March 13, 2013\n| title     = Ineffective Sorts\n| image     = ineffective_sorts.png\n| titletext = StackSort connects to StackOverflow, searches for 'sort a list', and downloads and runs code snippets until the list is sorted.\n}}\n\n==Explanation==\nThe comic gives examples of four non-functional {{w|sorting algorithm}}s written in {{w|Pseudocode|pseudo}}-{{w|Python (programming language)|Python}}.\n\nThe first sort is an unfinished {{w|merge sort}}. The merge sort works recursively by dividing a list in half and performing a merge sort to each half. After the two halves are sorted, they are merged, taking advantage of the fact that the two halves are now in correct order and thus the merge can be done efficiently. The author of the merge sort in the comic appears to have given up on writing the sorted-merge part of the sort, which is why it's a ''{{Wiktionary|half-hearted}}'' merge sort, but instead concatenates the halves without sorting. In its current state, the sort would divide the list into elements of size one, then recombine them in their original unsorted order, but in nested lists - making the original data more difficult to work with. The author acknowledges this failing with the comment \"Ummmmm... Here. Sorry.\"\n\nThe second sort is an \"optimized\" variant of {{w|bogosort}}. A standard bogosort works by randomly shuffling the elements in the list until they are sorted. In a comment, the author points out that this variant of bogosort runs in O(n log(n)), whereas standard bogosorts actually have an expected runtime of O(nÂ·n!) but may never finish. This variant of bogosort finishes so much faster because in most cases it does not actually sort the list, instead reporting a fictitious error in the operating system (a \"kernel page fault\") if the list isn't ordered after shuffling log(n) times. The bogosort is \"optimized\" because no comparison sort algorithm can possibly do better than O(n log(n)) in the worst case.\n\nThe third sort parodies a programmer explaining a {{w|quicksort}} during a job interview. The quicksort works by choosing an index as a pivot value and sorting all elements less than the pivot before the pivot and all the elements greater than the pivot after the pivot. It then does a quicksort to the section less than the pivot and the section greater than the pivot until the whole list is sorted. The interviewee flounders for a little while, then asks whether they can use the standard libraries to call a quicksort. The joke being, the standard library contains a quicksort, and the programmer would rather rely on that (possibly even pass it off as his own work) than his own example of quicksort. While it's commonly a good idea in real projects, this would surely count as a failure on interview.\n\nThe final sort is just a mess. First it checks to see if the list is sorted, and exits if it is. Then it rotates the list by a random amount 10,000 times (as if cutting a deck of cards) and exits if the list is ever sorted. Next, in desperation, it checks if the list is sorted three times. Finally, realizing that they have no chance of success, the author performs the computer equivalent of a {{tvtropes|RageQuit|Rage Quit}} and attempts to destroy the computer rather than admit defeat. First, the program attempts to schedule a shutdown of the computer in five minutes, then attempts to delete the current directory, then attempts to delete the user's home directory (presumably the grader's files), and finally all the files on the computer. {{w|rm (Unix)|rm}} is a POSIX command; the -r and -f flags mean that the remove command will remove all contents of the specified directories and will not prompt the user beforehand. Under the guise of \"{{w|Software portability|portability}}\", the program runs the equivalent Windows {{w|rmdir|rd}} command with switches to delete all files from the \"C:\" drive without prompting. Finally, the program returns a list containing the numbers one through five in order.\n\nIn the title text, {{w|StackOverflow}} ([https://stackoverflow.com/ link]) is a question-and-answer site where programmers can ask and answer questions on programming. The author of this code takes advantage of the hopes that someone on StackOverflow knows what they are doing and has posted code to sort a list... ''and somebody [https://github.com/gkoberger/stacksort/ implemented stacksort]; well, sort of.''\n\n==Transcript==\n:'''Ineffective sorts'''\n define HalfheartedMergeSort(list):\n     if length(list)<2:\n         return list\n     pivot=int(length(list)/2)\n     a=HalfheartedMergeSort(list[:pivot])\n     b=HalfheartedMergeSort(list[pivot:])\n     // ummmmm\n     return [a,b] // Here. Sorry.\n\n define FastBogoSort(list):\n     // An optimized BogoSort\n     // Runs in O(n log n)\n     for n from 1 to log(length(list)):\n         shuffle(list):\n         if isSorted(list):\n             return list\n     return \"Kernel Page Fault (Error code: 2)\"\n\n define JobInterviewQuicksort(list):\n     Ok so you choose a pivot\n     Then divide the list in half\n     for each half:\n         check to see if it's sorted\n             no, wait, it doesn't matter\n         compare each element to the pivot\n             the bigger ones go in a new list\n             the equal ones go into, uh\n             the second list from before\n         hang on, let me name the lists\n             this is list A\n             the new one is list B\n         put the big ones into list B\n         now take the second list\n             call it list, uh, A2\n         which one was the pivot in?\n         scratch all that\n         it just recursively calls itself\n         until both lists are empty\n             right?\n         not empty, but you know what I mean\n     am I allowed to use the standard libraries?\n\n define PanicSort(list):\n     if isSorted(list):\n         return list\n     for n from 1 to 10000:\n         pivot=random(0,length(list))\n         list=list[pivot:]+list[:pivot]\n         if isSorted(list):\n             return list\n     if isSorted(list):\n         return list:\n     if isSorted(list): //this can't be happening\n         return list\n     if isSorted(list): //come on come on\n         return list\n     // oh jeez\n     // i'm gonna be in so much trouble\n     list=[]\n     system(\"shutdown -h +5\")\n     system(\"rm -rf ./\")\n     system(\"rm -rf ~/*\")\n     system(\"rm -rf /\")\n     system(\"rd /s /q C:\\*\") //portability\n     return [1,2,3,4,5]\n\n{{comic discussion}}\n[[Category:Programming]]"
}
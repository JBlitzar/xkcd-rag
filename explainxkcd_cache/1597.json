{
    "comic_number": 1597,
    "explanation": "{{comic\n| number    = 1597\n| date      = October 30, 2015\n| title     = Git\n| image     = git.png\n| titletext = If that doesn't fix it, git.txt contains the phone number of a friend of mine who understands git. Just wait through a few minutes of 'It's really pretty simple, just think of branches as...' and eventually you'll learn the commands that will fix everything.\n}}\n\n==Explanation==\n===This is Git===\n{{w|Git (software)|Git}} is a version control system, used to manage the code in many millions of software projects. It is very powerful, and was amongst the first widely adopted tools to use a distributed version control model (the \"beautiful {{w|graph theory}} {{w|Tree (graph theory)|tree model}}\"), meaning that there is no single central repository of code. Instead, users share code back and forth to synchronise their repositories, and it is up to each project to define processes and procedures for managing the flow of changes into a stable software product.\n\n===How do we use it?===\nAlthough very powerful, the command line of Git is notoriously difficult to master. Dozens of blog posts and websites (see [http://think-like-a-git.net/epic.html], [http://stevebennett.me/2012/02/24/10-things-i-hate-about-git/]), and even books ([http://blog.anvard.org/conversational-git/chapter-01.html], [http://git-scm.com/book/en/v2]) have been written to help users navigate this complexity. \n\nThe difficulty of using Git in common situations is contradicted by the apparent simplicity of its use in tutorial-style situations. Committing and sharing changes is fairly straightforward, for instance, but recovering from situations such as accidental commits, pushes or bad merges is difficult without a solid understanding of the rather large and complex conceptual model. For instance, three of the top five highest voted questions on Stack&nbsp;Overflow are questions about how to carry out relatively simple tasks: undoing the last commit, changing the last commit message, and deleting a remote branch.\n\nThis comic thus explores the difference between the idealised view of Git's architecture, and its actual typical usage. Tutorials for Git tend to use simple systems in their examples, and only deal with the most basic commands to get started, which can create the misleading impression that Git can be used effectively without extensive study.\n\nDue to this problem, compounded by the fact that Git's commands are named differently from similar commands in other version control systems, many users (including Cueball) are unable to use it beyond basic commands, and might try to avoid problems by saving their code outside Git, downloading a newer copy, and then re-applying their changes to the new copy instead of trying to understand and use the features that exist in Git to accomplish this task.\n\n===Memorize these shell commands===\nCueball suggests \"just memoriz[ing] these shell commands and type them to sync up\". He is probably referring to a sequence of commands such as:\n\n    git pull\n    # remote changes have now been received, so work on your file\n    git add file.txt\n    git commit -m \"Added some text\"\n    git push\n\n===If you get errors...===\nAs long as every contributor to the project follows these principles, this may suffice for a while. But many situations may cause \"errors\":\n\n* merge conflicts (two people editing the same part of the same file)\n* unmerged changes (another person committed a change before you did, so you need to merge their changes first)\n* attempting to recover from a situation such as an accidental merge, and making the situation worse.\n\nIn a situation such as a merge conflict, Git will show an error message such as:\n\n    CONFLICT (modify/delete): README.md deleted in HEAD and modified in branch-b. Version branch-b of README.md left in tree.\n    # Automatic merge failed; fix conflicts and then commit the result.\n\n===Save your work elsewhere...===\nAlthough Git experts can of course deal with such situations, the remedy proposed by Cueball is \"save your work elsewhere, delete the project, and download a fresh copy\". That is, to copy the files out of their local repository's working directory, delete that whole structure, then clone the remote repository again (and, implicitly, copy the saved work back again):\n\n # Copy files elsewhere\n mkdir /tmp/myproject\n cp * /tmp/myproject\n cd ..\n # delete the project\n rm -rf myproject\n\n # Download a fresh copy\n git clone https://github.com/myorg/myproject\n cd myproject\n\n # Copy saved work\n cp /tmp/myproject/* .\n\nAbandoning the old project likely means losing some work, but may be faster and give a more predictable outcome than attempting to salvage the situation. Applying this method to a mere merge conflict issue may prolong the issue however, as the merge conflicts may still be present.\n\n===Title text===\nThe title text suggests an alternative method for working around Git's complexities, which reflects common practice: knowing a \"Git expert\" who can help in any situation. Such experts are somewhat notorious for waxing lyrically about Git's strengths, so it may be necessary to win their favour by first letting them ramble enthusiastically about it. They will hopefully eventually give the exact commands needed. In practice, the question-and-answer site Stack&nbsp;Overflow is frequently used for this exact purpose.\n\nIt may even be a reference to the infamous tweet \"[https://twitter.com/agnoster/status/44636629423497217 Git gets easier once you get the basic idea that branches are homeomorphic endofunctors mapping submanifolds of a Hilbert space]\" which has been [http://www.beyondjava.net/blog/git-explained-in-really-simple-words/ discussed here] but it is inconclusive whether a meaningful interpretation exists.\n\nPutting a telephone number of someone who \"understands Git\" into such a file is humorous because:\n*Software teams would more normally use electronic means of communication\n*Explaining Git over the phone to team members should not be necessary, as there is extensive help available online, and\n*In the situation where many team members would need phone support to avoid or fix basic Git problems, this would be extremely distracting to the person whose phone number was given in the file.\n\n=== TL;DR===\nIn short: programmers use {{w|Version control|version control systems}} to track changes to code. Most of these version control systems are quite similar and easy to learn if you already know another one. Git is a version control system based on completely different principles, and most programmers find it difficult to wrap their heads around it (although Git also offers a large number of nontrivial benefits over standard version control systems, which is why it is used). Cueball is one of those programmers.\n\n==Transcript==\n:[Cueball points to a computer on a desk while Ponytail and Hairy are standing further away behind an office chair.]\n:Cueball: This is git. It tracks collaborative work on projects through a beautiful distributed graph theory tree model.\n:Ponytail: Cool. How do we use it?\n:Cueball: No idea. Just memorize these shell commands and type them to sync up. If you get errors, save your work elsewhere, delete the project, and download a fresh copy.\n\n== Trivia ==\n\nThis comic was referenced in an earlier version of the page for ''what if?'' #153, where Randall, due to a problem with git, had at one time erroneously posted a draft of his ''[[what if? (blog)|what if?]]'' piece on [https://web.archive.org/web/20161205191559/http://what-if.xkcd.com/153 peptides]. As of December 17th, 2016 the page read:\n\n:;Whoops\n:This article is still in progress. An early draft was unintentionally posted here thanks to Randall's {{xkcd|1597|troubled approach to git}}, and it took a little bit to get everything sorted out and rolled back. Sorry for the mixup!\n\nOn January 30, 2017, the page was updated with a completed article, ''{{what if|153|Hide the Atmosphere}}''.  As of September 23, 2019, the page no longer contained any reference to this comic or Randall's earlier mistake with Git (or anything related to Git, for that matter).\n\nThe comic [[1296: Git Commit]] also features Git.\n\n{{comic discussion}}\n[[Category:Comics featuring Cueball]]\n[[Category:Comics featuring Ponytail]]\n[[Category:Comics featuring Hairy]]\n[[Category:Computers]]\n[[Category:Programming]]\n[[Category:Version Control]]"
}
{
    "comic_number": 1685,
    "explanation": "{{comic\n| number    = 1685\n| date      = May 25, 2016\n| title     = Patch\n| image     = patch.png\n| titletext = My optimizer uses content-aware inpainting to fill in all the wasted whitespace in the code, repeating the process until it compiles.\n}}\n\n==Explanation==\n{{w|Adobe Photoshop}} is a commonly used application for image manipulation. One of its features is the Patch tool, which allows the user to overwrite parts of the image, replacing them with a copy of another area of the same image. It is often used for “patching up” photographs by overwriting scratches or other visible damage to the photo. Another of Photoshop’s features is “content-aware fill”, which could also be described as “content-aware inpainting”. It works similarly to the Patch tool, but automatically generates a replacement texture from the area surrounding the deleted part instead of copying a user-specified area exactly.\n\n{{w|GNU}} {{w|Patch (Unix)|patch}} is a program that replaces only parts of code with an updated version, without requiring the user to download the entire source code. Here, it appears the author was told to “patch” the code but used Photoshop to do this instead of GNU patch, with devastating results.{{citation needed}} Although the title text suggests that if you did this enough times the code would eventually compile, this would be so unlikely to happen that it is effectively imposible. In fact, Photoshop could only edit an image of the text and not the text itself. However, it could work if optical character recognition (OCR) were integrated into the workflow as well.\n\nThe comic blurs the difference between {{w|text_file|text}} (in which letters and symbols represent discrete values, such as 65 being the number for the letter A in the ASCII encoding standard, and it's relatively easy for a program compiler to interpret combinations of these values as keywords and other programming constructs) and {{w|Raster_graphics|graphics}} (where the letters and symbols in the comic are actually represented by a pattern of colored dots), playing with the idea that the ''patch'' metaphor can be used on both (although with different meanings). There are common and straightforward processes for converting text information to images, such as printing, which can convert text to a graphics format very faithfully. The reverse, however, requires the use of {{w|optical character recognition}} (OCR), which attempts to figure out which letter or symbol certain patterns of dots \"look like\". OCR could be effective in converting some of the image in the comic back to usable text; however, it would fail on some of those patterns that have been mangled and don't look like any existing characters or symbols. A compiler can only operate on text data, so converting the graphic back into text would be a requirement to even begin to attempt to compile it, a step omitted in the title text.\n\nThe code appears to be written in {{w|Python_(programming_language)|Python}}, a programming language often referred to in xkcd, such as in [[353: Python]]. A few of the function names that can be recognized are \"isPrime\" and \"quicksort\", both elementary programming algorithms. It was also apparently originally edited using a Python-aware programming text editor, which is able to use different colors for different programming elements. For example, it appears to use red for keywords, blue for variables, and black for other elements; however, because of the mangling from the use of the wrong patching program, that doesn't appear to be consistent. Since the patching replaced graphical elements rather than whole characters, there are examples of symbols that are combinations of two different characters, and when the original two characters were rendered in different colors the resulting non-character could be in two colors, or the resulting \"word\" might be rendered in multiple colors.\n\nThe comic brings to attention the high rate of Adobe Photoshop piracy. GNU Patch is available for free, even [http://gnuwin32.sourceforge.net/packages/patch.htm for Windows], and Mac OS X. So the comic implies that Adobe Photoshop, a subscription to which costs $20/month, is more available than GNU patch. According to [http://blog.epicedits.com/2008/03/28/60-of-photoshop-users-are-pirates/ this poll], 58% of Photoshop copies were pirated.\n\nThe title text also explains that the patch used the content-aware inpainting to fill in all the wasted whitespace in the code. In most programming languages, whitespace is necessary to separate words, so this would combine words that shouldn’t be combined and create invalid code. Since the code in the image is Python, the code will be messed up even more, because Python uses whitespace as a part of its programming syntax. For example, statements are separated by newlines instead of by semicolons (;), and indentation is used instead of brackets to determine the scope of each section of code.\n\nThe original code was likely as follows:\n\n <font color=\"red\">import</font> re\n <font color=\"red\">def<font color=\"purple\"> isPrime</font></font>(n):\n \t<font color=\"red\">if </font>n<font color=\"red\"><=</font><font color=\"#44A1FF\">1</font>:\n \t\t<font color=\"red\">return</font> <font color=\"#44A1FF\">False</font>\n \t<font color=\"red\">for</font> i <font color=\"red\">in <font color=\"#44A1FF\">range</font></font>(<font color=\"#44A1FF\">2</font>, <font color=\"#44A1FF\">int</font>(n<font color=\"red\">**</font><font color=\"#44A1FF\">0.5</font>)<font color=\"red\">+</font><font color=\"#44A1FF\">1</font>):\n \t\t<font color=\"red\">if</font> n<font color=\"red\">%</font>i<font color=\"red\">==<font color=\"#44A1FF\">0</font></font>:\n \t\t\t<font color=\"red\">return<font color=\"#44A1FF\"> False</font></font>\n \t<font color=\"red\">return <font color=\"#44A1FF\">True</font></font>\n <font color=\"red\">def <font color=\"purple\">isPrimeRegex</font></font>(n):\n \t<font color=\"red\">if</font> re.match(<font color=\"red\">r</font><font color=\"blue\">'</font><font color=\"#44A1FF\">^</font><font color=\"blue\">1</font><font color=\"red\">?<font color=\"#44A1FF\">$</font>|<font color=\"#44A1FF\">^</font><font color=\"blue\">(11</font>+?<font color=\"blue\">)</font><font color=\"green\">\\1+</font><font color=\"#44A1FF\">$</font></font><font color=\"blue\">'</font>, <font color=\"blue\">'1'</font><font color=\"red\">*</font>n): \n \t\t<font color=\"red\">return <font color=\"#44A1FF\">False</font>\n \t<font color=\"red\">return<font color=\"#44A1FF\"> True</font></font></font>\n <font color=\"red\">def<font color=\"purple\"> quicksort</font></font>(a):\n \t<font color=\"red\">if <font color=\"#44A1FF\">len</font></font>(a) <font color=\"red\">< <font color=\"#44A1FF\">2</font></font>:\n \t\t<font color=\"red\">return </font>a\n \tpivot<font color=\"red\">=</font>a[<font color=\"#44A1FF\">0</font>]\n \tl<font color=\"red\">=</font>[i<font color=\"red\"> for</font> i <font color=\"red\">in</font> a <font color=\"red\">if</font> i<font color=\"red\"><</font>pivot]\n \tr<font color=\"red\">=</font>[i<font color=\"red\"> for</font> i <font color=\"red\">in</font> a <font color=\"red\">if</font> i<font color=\"red\">></font>pivot]\n \tmid<font color=\"red\">=</font>[pivot]<font color=\"red\">*</font>(<font color=\"#44A1FF\">len</font>(a)<font color=\"red\">-</font>(<font color=\"#44A1FF\">len</font>(l)<font color=\"red\">+</font><font color=\"#44A1FF\">len</font>(r)))\n \t<font color=\"red\">return </font>quicksort(l)<font color=\"red\">+</font>mid<font color=\"red\">+</font>quicksort(r)\n\nisPrime and quicksort are standard python implementations of simple algorithms (although you would not generally write a sorting algorithm in python as there are built-in algorithms available).  isPrimeRegex uses the [https://docs.python.org/library/re.html re module] to detect if a number is prime by seeing if a string containing that many 1s can be matched to 2 or more copies of some string containing at least 2 1s. This works by transforming the number into the [https://en.wikipedia.org/wiki/Unary_numeral_system unary numeral system] and seeing if there is a repeating patterns of 1s, i.e. the number is [https://en.wikipedia.org/wiki/Composite_number composite] and thus not prime. In more detail, the expression <font color=\"blue\">'1'</font><font color=\"red\">*</font>n converts the whole number n into a string of <font color=\"blue\">'1'</font> repeated n times. The regex then matches against this string. The first regex component <font color=\"#44A1FF\">^</font><font color=\"blue\">1</font><font color=\"red\">?</font><font color=\"#44A1FF\">$</font> finds the edge cases of 0 and 1 (not prime) as <font color=\"#44A1FF\">^</font> is the beginning of the line, <font color=\"blue\">1</font><font color=\"red\">?</font> means one or zero 1s, and <font color=\"#44A1FF\">$</font> is the end of the line. This matches only a blank string (the number 0) or a <font color=\"blue\">'1'</font> (the number 1). The second regex expression is separated from the first by |, a logical \"or\", so either expression will cause a match. The regex <font color=\"#44A1FF\">^</font><font color=\"blue\">(11</font>+?<font color=\"blue\">)</font><font color=\"green\">\\1+</font><font color=\"#44A1FF\">$</font> selects for a repeating pattern (the content inside the parenthesis) an additional one or more times as indicated by <font color=\"green\">\\1+</font>. The pattern inside the parenthesis is a string of 1s longer than 2 (thus filtering out the edge case of 2, which is a prime number) using the property of composite numbers that they must be two non-prime numbers multiplied together. Altogether, the entire line between <font color=\"#44A1FF\">^</font> and <font color=\"#44A1FF\">$</font> must be precisely a pattern of 2 or more ones with this pattern repeated 1 or more times. If either of these two statements is true (0 or 1 or a repeated pattern greater than length 2), the number is not a prime. Interesting benchmarks of this \"useless skill\" isPrimeRegex method in comparison to the naive isPrime method can be found [https://geelaw.blog/entries/regex-prime-js-benchmark/ here].\n\nThe comic two comics back [[1683: Digital Data]], also related to turning digital data into bad copies. Less than a month before quicksort was mentioned in [[1667: Algorithms]], and a month before that another \"easy\" solution to a programming problem was released in [[1654: Universal Install Script]].\n\nUsing a Photoshop tool for a task it is not intended for was also used in [[1784: Bad Map Projection: Liquid Resize]], where [https://helpx.adobe.com/photoshop/using/content-aware-scaling.html Photoshop's content-aware resizing tool] was a very questionable choice to use for a Map Projection.\n\n==Transcript==\n:[The panel displays part of a code, in five different colors (red, purple, light blue, blue, and green) as well as normal black text, which due to image editing is difficult to read. The first and last lines are partly obscured by the frame of the panel. Here below is an attempt to transcribe the code, using the sign \"¤\" for anything not easily transcribed. Feel free to add other signs instead of these that look more like the one in the image (and also improve the attempted transcription if possible).]\n <font color=\"red\">impoɞt</font> <font color=\"purple\">ne</font>\n <font color=\"red\">doo</font><font color=\"purple\">PisPʂnme</font>(n):\n \t<font color=\"red\">⫠</font>(<font color=\"purple\">¤</font>n<font color=\"red\"><</font>n,<font color=\"#44A1FF\">1</font>:\n \t\t<font color=\"red\">retɐrn</font> <font color=\"#44A1FF\">F</font>(<font color=\"#44A1FF\">ise</font>\n \t<font color=\"red\">for</font> i <font color=\"red\">ir</font><font color=\"#44A1FF\">arar𝞬e</font>(<font color=\"#44A1FF\">2</font>, <font color=\"#44A1FF\">ninߙ</font> <font color=\"red\">*</font>n<font color=\"red\">**</font>n<font color=\"red\">+</font><font color=\"#44A1FF\">5</font>)<font color=\"red\">+</font><font color=\"#44A1FF\">5</font>):\n \t\t<font color=\"red\">if</font> n i<font color=\"red\">==</font><font color=\"#44A1FF\">0</font>\n \t\t\t<font color=\"red\">re力¤𝑟nr</font><font color=\"#44A1FF\">₅ɵlsel</font>:\n \t<font color=\"red\">re</font><font color=\"purple\">𝗿</font><font color=\"red\">⃓rn </font><font color=\"#44A1FF\">True</font>\n <font color=\"red\">defe</font><font color=\"purple\">𝟧isPrimϵieg˓x</font>(c<font color=\"purple\">x</font>\n \t<font color=\"red\">if</font> <font color=\"purple\">g</font>ƨ<font color=\"purple\">¤i</font>natc<font color=\"purple\">x</font>(<font color=\"red\">r</font>'<font color=\"#44A1FF\">^</font><font color=\"blue\">(1</font><font color=\"red\">?| ?.</font><font color=\"blue\">1</font><font color=\"red\">+?</font><font color=\"blue\">)</font><font color=\"lime\">\\+</font><font color=\"blue\">)</font><font color=\"#44A1FF\">$</font>'<font color=\"red\">*</font>n <font color=\"blue\">⎞1'</font><font color=\"red\">*</font>n):\n \t\t<font color=\"red\">rerɹrn </font><font color=\"#44A1FF\">Fa</font><font color=\"blue\">(</font><font color=\"#44A1FF\"> e</font>\n \t<font color=\"red\">ιetu⃓</font><font color=\"purple\">nr</font><font color=\"#44A1FF\">TrꙆ</font>\n <font color=\"red\">dq</font><font color=\"purple\">⃓ q⃓soʀsor</font><font color=\"#44A1FF\">η</font>(a :\n \t<font color=\"red\">if </font><font color=\"#44A1FF\">¤n</font>(a  <font color=\"red\">< </font><font color=\"#44A1FF\">2</font>:\n \t\t<font color=\"red\">eteturn </font>a\n \tpi<font color=\"red\">=꞊ᵣ f</font>a[<font color=\"#44A1FF\">0</font>]\n \tl<font color=\"red\">=</font>pi<font color=\"red\">=for</font> j <font color=\"red\">ın</font> a i<font color=\"red\"><</font> i<font color=\"red\"><</font>pi<font color=\"red\"><</font>(t]<small>(</small>)\n \tr<font color=\"red\">=</font>[ı<font color=\"red\">=for 𝟋 in</font> a) <font color=\"red\">r</font> i<font color=\"red\">></font>viviv]<small>(</small>vo)\n \tmid<font color=\"red\">=</font>[pi[<font color=\"red\">*</font>t]<font color=\"red\">*</font>(<font color=\"#44A1FF\">l</font><font color=\"red\">*</font>t<font color=\"#44A1FF\">ˌ</font>(a)<font color=\"red\">-</font>(<font color=\"#44A1FF\">⟘en</font>pᚆ<font color=\"#44A1FF\">enlen</font>(c)))\n \t<font color=\"red\">r¤lrurrr</font>ikıcksckt(l) <font color=\"red\">+</font> r ¤ ¤quickrprt(r)\n\n:[Caption below the panel:]\n:Protip: If you don't have access to the GNU ''patch'' tool, you can use the Photoshop one.\n\n{{comic discussion}}\n[[Category:Comics with color]]\n[[Category:Protip]]\n[[Category:Programming]]\n[[Category:Photography]]"
}
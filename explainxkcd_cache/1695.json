{
    "comic_number": 1695,
    "explanation": "{{comic\n| number    = 1695\n| date      = June 17, 2016\n| title     = Code Quality 2\n| image     = code_quality_2.png\n| titletext = It's like you tried to define a formal grammar based on fragments of a raw database dump from the QuickBooks file of a company that's about to collapse in an accounting scandal.\n}}\n\n==Explanation==\nThis comic is the second in the [[:Category:Code Quality|Code Quality series]]:\n* [[1513: Code Quality]]\n* [[1695: Code Quality 2]]\n* [[1833: Code Quality 3]]\n\nAlthough [[Cueball]] is not seen in this comic, we can surmise that he is speaking from off-panel based on continuity with [[1513: Code Quality]]. As in the first comic in the series, we again see [[Ponytail]] being introduced to the messy {{w|source code}} Cueball has written. This comic evidently takes place some time later, as Ponytail now appears to be familiar with Cueball's code, and dreads reading it. In this comic, she continues the trend started in the first comic by using a parade of vivid similes to convey the incomprehensible nature of Cueball's code.\n\n===OCR, Scrabble, and Javascript-reserved words===\nIn her first simile, Ponytail makes a reference to using OCR ({{w|Optical Character Recognition}}) to recognize the letters on a {{w|Scrabble}} board. OCR is notoriously imperfect and often gets letters wrong, resulting in garbled words. The fact that a Scrabble board has criss-crossing words, with some of them traversing the board vertically, would make OCR output even less reliable.\n\nPonytail observes that Cueball’s code includes the [https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Lexical_grammar#Keywords JavaScript reserved words] more often than a typical Scrabble board would, a concession that the code looks at least vaguely code-like. In programming, a reserved word is a word that has meaning to the programming language, and therefore is not permitted to be used as a variable name. Common examples are 'function', 'if', and 'return'. The reference to \"triple points\" refers to the fact that Scrabble's scoring system is based on the point values of individual letters; certain modifier squares on the board can double or triple those values. If Javascript reserved words are worth triple, that would incentivize the players to play them whenever they can, which could give the vague appearance of some kind of code structure.\n\n===Weather forecasts and woodpeckers===\nIn her second simile, Ponytail references naval weather forecasts, avian interference, and indentation. A weather forecast is a complex, multidimensional array of data used in predicting or assessing the atmospheric conditions of a geographical area over a set time. [https://web.archive.org/web/20191115003453/https://aviationweather.gov/static/help/taf-decode.php Naval weather forecasts] (archive) use an extremely condensed code to send their information, rendering them unintelligible to an untrained reader. This is similar to the common bad coding practice of using unhelpful variable names - typically ones that are short and have no obvious meaning, or may even be misleading.\n\nTranscribing such a weather forecast would be further complicated by a {{w|woodpecker}} randomly pecking the Shift key on the keyboard. Woodpeckers are wild birds famed for their ability to very rapidly peck at a target, which they use to make holes in trees, and also to create a loud \"drumming\" sound that can be heard a long way. Having a woodpecker peck at the Shift key would result in many letters being randomly capitalized, further reducing the readability of the output.\n\nPonytail then suggests that the output is \"randomly indented\". Indentation is the practice of shifting a section of text further from the starting margin. In coding, indentation typically has no semantic function, but rather is a way to visually indicate blocks of code in a hierarchical fashion. Without indentation, code becomes extremely hard to read - as an example, see the entries in the {{w|International Obfuscated C Code Contest}} to see just how bad this can get.\n\nThe Python programming language is famous for actually making indentation part of its semantics - a Python program ''must'' be correctly indented, or it will not run.\n\nIf a piece of code was ''randomly'' indented, this could be even worse than having no indentation at all, as it could lead readers to see structures where there are none.\n\n===E. E. Cummings and usernames===\n<div class=\"poem\" style=\"float: right; clear: both; margin: 0 0.5em; font-size: 90%\">\n <pre class=\"poem preformatted\">Buffalo Bill's\ndefunct\n        who used to\n        ride a watersmooth-silver\n                                  stallion\nand break onetwothreefourfive pigeonsjustlikethat\n                                                  Jesus\nhe was a handsome man\n                      and what i want to know is\nhow do you like your blueeyed boy\nMister Death</pre>\n <div class=\"poem attribution\" style=\"text-align: right\">–E. E. Cummings, \"Buffalo Bill's\" (1920)</div>\n</div>\nPonytail's third simile references famous poet {{w|E. E. Cummings}}. Edward Estlin Cummings was a poet who used capitalization, punctuation, and line breaks in unconventional ways, suggesting that Cueball's naming conventions are esoteric and hard to follow. She follows this up by restricting the vocabulary to \"the usernames a website suggests when the one you want is taken\". Websites that offer membership typically require users to create a username that uniquely identifies them. This means that two people cannot have the same username, so if you try to request a name that's already in use, the website will ask you to pick another. Some websites try to help out by suggesting alternative usernames which are close to, but not quite the same as, the one they requested.\n\nFor example, if the username \"[[119: Worst Band Name Ever|Hedgeclipper]]\" is already taken, the site may recommend \"Hedgeclipper1234\" or \"H3dg3clipp3r\" instead, depending on the algorithm behind the suggestions. These names are usually harder to read and less elegant than the one the user actually wanted. An E. E. Cummings poem written entirely out of these semi-random suggestions would make the resulting poem even more \"unusual\" than his work is already considered.\n\n===Markov bots and bus timetables===\nThe final simile involves {{w|Markov chain|Markov chaining}}, bus schedules, and potential gross vehicular negligence. A Markov chain is a sequence in which each symbol depends only on the previous symbol. This is often used to simulate real-world concepts such as speech simulation and decision making. For example, in English text, you can make reasonable predictions as to what the next letter might be, based on the knowledge of which letters tend to be used together (and which don't). Thus, a Markov bot programmed with basic knowledge of English letter frequencies could produce plausible-looking text. However, the text would make absolutely no sense, as Markov processes are probabalistic and have no knowledge of how English semantics work.\n\nBus schedules are [http://elb-jpinstances-1463028547.us-east-1.elb.amazonaws.com/ccg3/XSLT_STT_REQUEST?mode=direct&line=ccg:01065:%20:H:y15&sessionID=0&requestID=0&itdLPxx_template=tableResults&type_stt=any&language=en&coordOutputFormat=WGS84%5Bdd.ddddd%5D&outputFormat=0&name_stt=10111816&contentFilter=allstops often complicated and full of notation], and are notorious for confusing people who are not used to reading them. Using these as the input to a Markov bot would result in an even more garbled and unreadable mess, as the Markov bot doesn't understand bus timetables either.\n\nThe issue is further complicated when Ponytail suggests that the schedules are from a city where \"the buses crash constantly\", which would be horrifying if it happened so regularly that the schedules actually took crashes into account. However, this is likely just Ponytail adding an additional layer of convolution to the simile.\n\nCueball finally comments that \"… it runs fine for now\" which indicates he knows the code has problems but is reluctant to fix them because it's more-or-less serving its function. This is a well-known cop-out in software development, and is considered poor practice - the fact that the code is running ''for now'', or runs in the specific circumstances the developer tested it in, does not mean that it is well-written, or that it will integrate with other parts of the system, or that it will continue to run reliably in the future.\n\nPonytail quips back that \"So does a burning bus\", which also meets Cueball's low standard - a burning bus can still drive despite being on fire, but most people would not enjoy traveling in such a vehicle,{{Citation needed}} and there will eventually come a point where the fire will endanger the occupants and interfere with the operation of the bus. This could be the reason the buses are always crashing in Ponytail's hypothetical scenario.\n\n===Title text===\nIn the title text, Ponytail compares the code to a formal grammar, which is a way of describing a set of strings by providing a list of mapping rules that generate those strings. The resulting output would be a laborious list of rules which would all randomly reference each other, akin to {{w|spaghetti code}}. Furthermore, she suggests that the grammar is based on fragments of a raw {{w|database dump}}, which would be an export of the data from a database in a \"raw\" format that contains no processing that would make it easy for humans to read. {{w|QuickBooks}} is an accounting software meant for small companies, which could imply that the code Cueball has written is related to finance in some way. If the company using QuickBooks is embroiled in an accounting scandal, their database is likely already in a mess, even in human-readable format, [https://www.businessinsider.com/ftx-ceo-said-company-used-quickbooks-like-scene-breaking-bad-2022-12 especially if they are a medium- or large-sized company].\n\n==Transcript==\n:[Zoom in on Ponytail sitting in front of a computer screen typing. Cueball speaks only off-panel, but since this is a direct continuation of comic 1513: Code Quality where Cueball is shown, there can be no doubt it is him.]\n:Ponytail: Ugh, I hate reading your code.\n:Cueball (off-panel): I know, I know.\n\n:[Zoom out of Ponytail in an office chair in front of the computer on a desk.]\n:Ponytail: It's like you ran OCR on a photo of a Scrabble board from a game where Javascript reserved words counted for triple points.\n\n:[Zoom in on Ponytails head.]\n:Ponytail: It looks like someone transcribed a naval weather forecast while woodpeckers hammered their shift keys, then randomly indented it.\n\n:[Zoom out back to the setting of the second panel.]\n:Ponytail: It's like an E E Cummings poem written using only the usernames a website suggests when the one you want is taken.\n\n:[Zoom in to Ponytails head and the screen in a wider panel. Finally Cueball again answers off-panel.]\n:Ponytail: This looks like the output of a Markov bot that's been fed bus timetables from a city where the buses crash constantly.\n:Cueball (off-panel): Whatever, it runs fine for now.\n:Ponytail: So does a burning bus.\n\n{{comic discussion}}\n\n[[Category:Code Quality]]\n[[Category:Comics sharing name|Code Quality 02]]\n[[Category:Comics featuring Ponytail]]\n[[Category:Comics featuring Cueball]] <!--It is Cueball that replies given that this is a follow up to 1513: Code Quality -->\n[[Category:Language]] <!-- Formal grammar title text-->\n[[Category:Animals]]  <!-- Woodpeckers -->\n[[Category:Programming]]\n[[Category:Computers]]\n[[Category:Cueball's computer problems]]"
}
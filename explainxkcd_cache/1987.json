{
    "comic_number": 1987,
    "explanation": "{{comic\n| number    = 1987\n| date      = April 30, 2018\n| title     = Python Environment\n| image     = python_environment.png\n| titletext = The Python environmental protection agency wants to seal it in a cement chamber, with pictorial messages to future civilizations warning them about the danger of using sudo to install random Python packages.\n}}\n\n==Explanation== \nA development environment is the collection of tools used to create a computer program.  It generally includes an {{w|Interpreter_(programming)|interpreter}}, a {{w|package manager}}, and various {{w|Library_(computing)|libraries}} that the project needs. One such example is {{w|Python_(programming_language)|Python}}.\n\nHistorically, a computer would have only a single such environment, ie. only one copy of these tools installed, with all programs running off of it. However, people quickly discovered that this caused issues when said tools got updated and unintentionally break the programs. As an example, many programs still run on Python 2.7 (released in 2010) because Python 3.x changed things around so much that the effort to alter the program to run on it was deemed too much effort.\n\nIn an attempt to solve the above issue, the solution was determined to simply have each program have their own copy of the tools that they could be free to modify however they like without worrying about how it might affect other programs. Multiple tools were then developed intending to make it easier for a user to manage and keep track of the now-multiple environments, but it seems that for Randall this has simply created a new issue: he has lost track of which copy of Python his computer uses by default.\n\nTo avoid the chaos described in the comic, modern Python recommends the consistent use of a package manager like [https://github.com/astral-sh/uv uv], [https://github.com/python-poetry/poetry Poetry], or [https://docs.python.org/3/library/venv.html venv] to isolate Python environments and versions.\n\n{{w|Superfund}} is a US federal government program created for cleaning up contaminated land. The comic is saying that his computer's Python environment is so messed up that it's comparable to a real-world environmental disaster.\n\nThe title text may refer to the philosophical debate surrounding the construction of warning features around the [[wikipedia:Waste_Isolation_Pilot_Plant#Warning_messages_for_future_humans|WIPP]] site in New Mexico, and other nuclear waste disposal sites. In particular, it may refer to [https://web.archive.org/web/20090320054657/http://www.wipp.energy.gov/picsprog/articles/wipp%20exhibit%20message%20to%2012,000%20a_d.htm this article]. These would have to last and be understandable for tens of thousands of years, longer than any known human-made structure or language to date. It also refers to the use of \"sudo\", a command utility included in many Linux distributions that allows a user to operate with heightened permissions. Using \"sudo\" to install a Python package may make the package available to the entire system, or, based on the settings of Virtualenv/Anaconda, it may end up installing the package in a user's home directory. This would make it so that the user could not update, edit, or remove the packages.\n\n;$PATH\n:$PATH refers to the {{w|PATH (variable)|PATH}} environment variable, which determines where to search for executable files. In this case, it indicates that the pip, Homebrew Python (2.7), and macOS's pre-installed Python are accessible on path, with ~/newenv/ and a mysterious ???? as part of PATH.\n;pip\n:{{w|pip (package manager)|pip}} is the Python {{w|package management system}}, and is used to install and manage python packages. As it is written in Python, it requires Python to run. It leads to easy_install, Homebrew Python (2.7), \"(misc folders owned by root)\", and ????.\n;Homebrew Python (2.7)\n:{{w|Homebrew (package management software)|Homebrew}} is a third-party macOS package manager. Homebrew Python (2.7) is the Python 2 version installed through Homebrew. This leads to Python.org binary (2.6) and /usr/local/Cellar.\n;OS Python\n:Apple bundles an (out of date) version of Python with macOS. This only leads to ????.\n;????\n:With so many versions of Python installed and used in the system, it becomes very hard to track which Python program uses which version and environment. The system becomes unpredictable and its workings and faults mysterious. All parts of the graph that lead to this point, lead to confusion.\n;easy_install\n:easy_install, much like pip, is a cpan-like tool to download and install Python packages.  As of the creation of the comic, many people discourage its use.  (e.g., [https://stackoverflow.com/questions/3220404/why-use-pip-over-easy-install this question on stack exchange.])\n;Anaconda Python\n:{{w|Anaconda (Python distribution)|Anaconda}} is a Python distribution for data science and machine learning-related applications.\n;Homebrew Python (3.6)\n:As of the creation of the comic, Python 3.6 is the current stable version of Python. It can be installed together with Python 2.7 on the same computer. Care must be taken to use an appropriate version for every Python program, however. Homebrew is a \"macos\" package management utility. Presumably, Randall installed Python 3.6 with Homebrew (as opposed to downloading and compiling the language himself).\n;Python.org binary (2.6)\n:[http://python.org Python.org] is the home site of the {{w|Python_(programming_language)|Python language}} and provides its reference implementation. Among other stuff, there are downloadable installers that create ready-to-use Python environments for you (on Windows and macOS only). It makes little sense, however, to use it on a computer where Homebrew, Anaconda, and a locally compiled version are already present, since the Python.org version is the baseline one, doesn't give you any benefits, and can't be optimized for your needs. Having an obsolete 2.6 version, when the typically used 2.7 is already on the computer, also doesn't help. Some justified uses do exist (tests, programs that depend on this particular version), but in the end, an extra version of Python just adds to the overall confusion.\n;(Misc folders owned by root)\n:This suggests that over years [[Randall]] dropped various versions of {{w|Python_(programming_language)|Python}} environments everywhere around his computer, probably by hand without proper installers, and used root privileges to do so. The exact locations either are highly nonstandard, so it makes no sense to show them to us, or have simply been forgotten. Now it's hard to even tell where exactly those Pythons lay, what in the system depends on them, and if it's safe to remove them or not (because if installed by the root, they can integrate into unexpected places in the system; having them can break something, and removing them can break something).\n;<code>/usr/local/Cellar</code>\n:The default (normal) location of the {{w|Homebrew (package management software)|Homebrew}} Cellar, the directory where Homebrew actually stores the files of the installed packages. It's a storage-only location, the files, including Python, will be symlinked from other, more convenient places in the files tree, and should not be used through /usr/local/Cellar path directly. It seems that Randall broke this safety rule in the past, so some stuff of his accesses Python directly in the Cellar. Such setup can break if Homebrew performs automatic maintenance in the Cellar (like removing unneeded versions of the packages). The name cellar is likely a reference to the practice of storing wines and other alcohol in cellars, intended as a pun of homebrew.\n;<code>/usr/local/opt</code>\n:A folder that is usually created by Homebrew.\n;/(A bunch of paths with \"Frameworks\" in them somewhere)/\n:Python on macOS is often distributed as a framework and placed in a \"Frameworks\" folder. For example, the system-included Python distribution in macOS resides in /System/Library/Frameworks, and many package managers will also install the framework in a folder with this name.\n;$PYTHONPATH\n:The environment variable PYTHONPATH specifies the search path for Python modules to the Python interpreter. Having it refer to locations controlled by 3 different package managers, each of which is managing software for different versions of Python, as shown, is likely to lead to incompatible software being loaded together.\n;Another pip??\n:Pip is a {{w|Recursive acronym}} for \"Pip Installs Packages.\" There should only be one installation of pip (or other package management system) managing any given working environment. Often, additional \"pip\" executables are installed based on the Anaconda settings for different virtual envs. This often leads to internal contradictions in the software. Randall is confused as to how this other one relates to the rest of the development environments.\n;~/python/\n:Might be another virtualenv, or, given the absurdity of the rest of the comic, even a manually compiled python installation (many online guides instruct users to extract sources into the home (~) directory). \n;~/newenv/\n:Probably a virtualenv.  Virtualenvs are mechanisms for having Python environments that don't conflict with the system Python.  They include the Python interpreter, independent library paths, and usually a copy of pip.  The user typically installs packages using the virtualenv's pip such that they can only be accessed by the virtualenv's Python instances, while more common packages are still referenced via the system Python paths.\n;/usr/local/lib/python3.6\n:The default place under a Unix-like OS for the Python 3.6 standard libraries for a locally compiled Python 3.6 interpreter.\n;/usr/local/lib/python2.7\n:The default place under a Unix-like OS for the Python 2.7 standard libraries for a locally compiled Python 2.7 interpreter.\n\n==Transcript==\n:[A single frame depicting a flowchart is shown. Many chaotic arrows are arranged between the items which are:]\n:$PYTHONPATH\n:EASY_INSTALL\n:ANACONDA PYTHON\n:HOMEBREW PYTHON (3.6)\n:ANOTHER PIP??\n:HOMEBREW PYTHON (2.7)\n:PYTHON.ORG BINARY (2.6)\n:PIP\n:EASY_INSTALL\n:$PATH\n:(MISC FOLDERS OWNED BY ROOT)\n:????\n\n:[The endpoints are:]\n:/usr/local/Cellar \n:/usr/local/opt\n:/(A BUNCH OF PATHS WITH \"FRAMEWORKS\" IN THEM SOMEWHERE)/\n:~/python/ \n:~/newenv/\n:/usr/local/lib/python3.6\n:/usr/local/lib/python2.7\n\n:[Caption below the panel:]\n:My Python environment has become so degraded that my laptop has been declared a superfund site.\n\n== Trivia ==\n\n* A similar comic is {{xkcd|1654}} which is the same but for multiple languages.\n\n{{comic discussion}}\n\n[[Category:Computers]]\n[[Category:Programming]]\n[[Category:Flowcharts]]"
}
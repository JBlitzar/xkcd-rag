{
    "comic_number": 835,
    "explanation": "{{comic\n| number    = 835\n| date      = December 17, 2010\n| title     = Tree\n| image     = tree.png\n| titletext = Not only is that terrible in general, but you just KNOW Billy's going to open the root present first, and then everyone will have to wait while the heap is rebuilt.\n}}\n\n==Explanation==\n[[Cueball]] turns his family's living room Christmas tree into a cringingly-awful programming pun. His parents, [[Hairbun]] and a father-Cueball, are so unamused, he's not welcome back next year.\n\n{{w|Tree (data structure)|Trees}} are data structures in computer science, based on two simple rules:\n\n*A tree starts at a single node, called its root.\n*Each node in a tree has two or more spaces for its children, each of which may be empty or occupied by another node. Of course, that node may have its own children, and so forth. Each node except the root has exactly one parent. As a bit of trivia, a node with no children is called a \"leaf node.\"\n\nA binary tree is a tree where each node has spaces for exactly 2 children.\n\nThe \"Christmas tree\" is a basic representation of a binary tree - the star at the top is the root node, and the lights running down indicate the connections between parent and child. Contrary to what the terms \"root\" and \"leaf\" might imply, trees in computer science are typically represented upside-down, with the root on top and the leaves fanning out below. This gives the tree a similar profile to the conical pine trees typically used as Christmas trees.\n\nThe Christmas tree is constructed based on no apparent rules, but the main power of data trees comes in organizing them according to specific rules. Because code that runs later can assume the data is organized in this specific way, it can use different algorithms that make things run faster. One way of doing this is with a heap. A {{w|Heap (data structure)|heap}} is a special kind of tree (usually a binary tree, but in this case a quaternary tree), subject to one additional rule:\n\n*For every node in the tree, ''everything'' beneath that node - both or all of its children, all of its children's children, all of ''their'' children, and so on - are \"less than\" the node itself.\n\n\"Less than\" in this case can refer to any comparison that can be made between two nodes - in this case, it's based on the size of the presents. Of course, there's a cost to all this; the heap must first be placed in that order. Not only that, but if a node gets removed from the heap, the heap has to be \"rebuilt\" to put it back in the right order. This is referenced in the title text - if Billy opens the root present, several comparisons must be done to shift other presents in its place to preserve the heap rule.\n\nIn [[1308: Christmas Lights]] a similar strange Christmas tree has been constructed using the electromagnetic spectrum, which evidently received a far better reception in-universe.\n\n==Transcript==\n:[There is a binary Christmas tree, with each node a ball, and lights strung between parent and child nodes. Beneath it is a heap of presents - sorted with the largest on top, smaller presents connected to it with string. Next to the tree is Cueball and his parents, Hairbun and another Cueball.]\n:Cueball: It's a Christmas tree with a heap of presents underneath!\n:Mother: ...We're not inviting you home next year.\n\n{{comic discussion}}\n[[Category:Comics with color]]\n[[Category:Christmas]]\n[[Category:Comics featuring Cueball]]\n[[Category:Comics featuring Hairbun]]\n[[Category:Multiple Cueballs]]\n[[Category:Programming]]\n[[Category:Puns]]"
}
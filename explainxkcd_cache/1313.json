{
    "comic_number": 1313,
    "explanation": "{{comic\n| number    = 1313\n| date      = January 6, 2014\n| title     = Regex Golf\n| image     = regex_golf.png\n| titletext = <nowiki>/bu|[rn]t|[coy]e|[mtg]a|j|iso|n[hl]|[ae]d|lev|sh|[lnd]i|[po]o|ls/ matches the last names of elected US presidents but not their opponents.</nowiki>\n}}\n\n==Explanation==\nThe comic talks about [[:Category:Regex|regular expressions]], which are a way to specify textual patterns. Given a regular expression, one can search for the pattern it specifies inside a text string. If the pattern is found, it's said that the pattern \"matches\" the string; if it's not found, it's said it doesn't match. The title of the comic and the first panel is based on \"[https://regex.alf.nu/ regex golf]\", which is a discipline of \"{{w|code golf}}\", a game in which programmers attempt to solve a given programming problem using as few characters as possible, analogous to the number of {{w|golf}} shots it takes to reach the goal. In regex golfing, the programmer is given two sets of text fragments, and tries to write the shortest possible regular expression which would match all elements of one set, while at the same time not matching any element from the other set. The day after this comic was released, Randall mentioned he got distracted by https://regex.alf.nu, a website with a regexp golf game, while researching for the ''[[what if? (blog)|what if?]]'' article ''{{what if|78|T-rex Calories}}''. Regular expressions have been mentioned on xkcd in [[:Category:Regex|many other comics]].\n\nIn the regex golf challenge Megan faced, the two sets are the subtitles of the (then-extant) films from the ''{{w|Star Wars}}'' and ''{{w|Star Trek}}'' franchises. Her regex must match all ''Star Wars'' subtitles, and must not match any ''Star Trek'' subtitle. {{w|Subtitle (titling)|Subtitles}} are the secondary titles of the movies, after the ''\"Star Trek: \"'' or ''\"Star Wars Episode N: \"''. For example, in ''Star Wars Episode I: The Phantom Menace'', the subtitle is ''The Phantom Menace''. In the first panel, she has created a 12-character regex solving the challenge.\n\nThen she moved on to building a tool which would automatically build such a regex for arbitrary lists of text, which could be described as {{w|meta}}- regex golfing. But as she has lost this tool, she needs to search through her files and chooses a tool called \"{{w|grep}}\" to find it. This tool uses regexes, implying that she needs a regular expression that would find any code that appears to be a regex golf generator, which leads to another \"meta-\" layer of abstraction. At the end, Megan notes this sequence of meta-meta-... might go to infinity and Cueball quips that she now has \"infinite problems\" as a result of her efforts; Megan retorts that she already had \"infinite problems\" because she's geeky enough to run meta-versions of programs on themselves, and stubborn enough to continue on until she fails, to the exclusion of all else. This also seems to be a reference to a famous quote by {{w|Jamie Zawinski}} (see also ''[[1171: Perl Problems]]''):\n\n{{Quote|Some people, when confronted with a problem, think \"I know, I'll use regular expressions.\" Now they have two problems.}}\n\n===Star Wars regex===\nThe first regex Megan uses is <code>/m | [tn]|b/</code>, said to match ''Star Wars'' subtitles but not ''Star Trek''. The forward slashes <code>/</code> just mark the start and end of the regex. The <code>|</code> character means \"or\", so the regex matches any string that contains the patterns <code>m </code>, <code> [tn]</code> or <code>b</code> (including the spaces). The square brackets match one of the enclosed characters, meaning that <code> [tn]</code> matches either <code> t</code> or <code> n</code> (that is, a space followed by a letter \"t\" or \"n\").\n\n(Note that in this explanation, the regex has been written in lower case. In general, regular expressions are case-sensitiveâ€”that is, they treat upper- and lower-case letters as different. Regexes ''can'' be set to ignore case, and given that [[Randall]]'s comic lettering is in all-caps, we can assume that this is done here.)\n\nThe Star Wars subtitles match the parts of the regex in the following way:\n\n* \"The Phanto<code>m </code>Menace\" is matched by <code>m </code>.\n\n* \"Attack of<code> t</code>he Clones\" is matched by <code> [tn]</code>.\n\n* \"Revenge of<code> t</code>he Sith\" is matched by <code> [tn]</code>.\n\n* \"A<code> N</code>ew Hope\" is matched by <code> [tn]</code>.\n\n* \"The Empire Strikes <code>B</code>ack\" is matched by <code>b</code>.\n\n* \"Return of<code> t</code>he Jedi\" is matched by <code> [tn]</code>.\n\nOn the other hand, no ''Star Trek'' subtitle contains an M followed by a space, a T or an N preceded by a space, or any B, so the regex does not match any of them. Note that in the first six (\"Original series\") films, all subtitles start with \"The\", but as the \"T\" is the first character, it is not preceded by a space. Here is the list that Megan probably used:\n\nOriginal series:\n* The Motion Picture\n* The Wrath of Khan\n* The Search For Spock\n* The Voyage Home\n* The Final Frontier\n* The Undiscovered Country\nThe Next Generation:\n* Generations\n* First Contact\n* Insurrection\n* Nemesis\nReboot series:\n* (No subtitle)\n* Into Darkness\n\nThe animated film ''Star Wars: The Clone Wars'' was released before this comic. If it were included, it would not be matched by Megan's regex. (<code> [tn]</code> does not match, for the same reason as for the ''Star Trek'' films: the T is the start of the subtitle, and is not preceded by a space.) None of the subtitles of ''Star Wars'' films released since this comic (\"The Force Awakens\", \"The Last Jedi\", and \"The Rise of Skywalker\") match this regex, either.\n\n''Star Trek Beyond'', which was released after this comic, would incorrectly match the regex since it is the first ''Star Trek'' title to contain a \"b\". However, since ''Star Trek Into Darkness'' and ''Star Trek Beyond'' both lack a colon in their titles, it is [[1167: Star Trek into Darkness|debatable]] whether they can truly be considered to have subtitles.\n\nIn the last panel (\"...and beyond\"), Megan uses the regular expression <code>/(meta-)*regex golf/</code> to describe her problem. <code>*</code> means \"zero or more\" of the preceding character/group (parentheses <code>()</code> group characters). So this regex matches \"regex golf\", \"meta-regex golf\", \"meta-meta-regex golf\", etc. In a way this is regex golf in itself, matching all levels of meta-regex golf while not matching anything else.\n\n===US presidents regex===\n\n{| class=\"wikitable sortable floatright\"\n|+ US presidents regex\n|-\n!#\n!President\n!Matched expression\n|-\n|1\n|{{w|George Washington|George Wa<code>sh</code>ington}}\n|<code>sh</code>\n|-\n|2\n|{{w|John Adams|John <code>Ad</code>ams}}\n|<code>[ae]d</code>\n|-\n|3\n|{{w|Thomas Jefferson|Thomas <code>J</code>efferson}}\n|<code>j</code>\n|-\n|4\n|{{w|James Madison|James <code>Ma</code>dison}}\n|<code>[mtg]a</code>\n|-\n|5\n|{{w|James Monroe|James Monr<code>oe</code>}}\n|<code>[coy]e</code>\n|-\n|6\n|{{w|John Quincy Adams|John Quincy <code>Ad</code>ams}}\n|<code>[ae]d</code>\n|-\n|7\n|{{w|Andrew Jackson|Andrew <code>J</code>ackson}}\n|<code>j</code>\n|-\n|8\n|{{w|Martin Van Buren|Martin Van <code>Bu</code>ren}}\n|<code>bu</code>\n|-\n|9\n|{{w|William Henry Harrison|William Henry Harr<code>iso</code>n}}\n|<code>iso</code>\n|-\n|11\n|{{w|James K. Polk|James K. <code>Po</code>lk}}\n|<code>[po]o</code>\n|-\n|12\n|{{w|Zachary Taylor|Zachary <code>Ta</code>ylor}}\n|<code>[mtg]a</code>\n|-\n|14\n|{{w|Franklin Pierce|Franklin Pier<code>ce</code>}}\n|<code>[coy]e</code>\n|-\n|15\n|{{w|James Buchanan|James <code>Bu</code>chanan}}\n|<code>bu</code>\n|-\n|16\n|{{w|Abraham Lincoln|Abraham <code>Li</code>ncoln}}\n|<code>[lnd]i</code>\n|-\n|17\n|{{w|Andrew Johnson|Andrew <code>J</code>ohnson}}\n|<code>j</code>\n|-\n|18\n|{{w|Ulysses S. Grant|Ulysses S. Gra<code>nt</code>}}\n|<code>[rn]t</code>\n|-\n|19\n|{{w|Rutherford B. Hayes|Rutherford B. Ha<code>ye</code>s}}\n|<code>[coy]e</code>\n|-\n|20\n|{{w|James A. Garfield|James A. <code>Ga</code>rfield}}\n|<code>[mtg]a</code>\n|-\n|22\n|{{w|Grover Cleveland|Grover C<code>lev</code>eland}}\n|<code>lev</code>\n|-\n|23\n|{{w|Benjamin Harrison|Benjamin Harr<code>iso</code>n}}\n|<code>iso</code>\n|-\n|24\n|{{w|Grover Cleveland|Grover C<code>lev</code>eland}}\n|<code>lev</code>\n|-\n|25\n|{{w|William McKinley|William McKi<code>nl</code>ey}}\n|<code>n[hl]</code>\n|-\n|26\n|{{w|Theodore Roosevelt|Theodore R<code>oo</code>sevelt}}\n|<code>[po]o</code>\n|-\n|27\n|{{w|William Howard Taft|William Howard <code>Ta</code>ft}}\n|<code>[mtg]a</code>\n|-\n|28\n|{{w|Woodrow Wilson|Woodrow Wi<code>ls</code>on}}\n|<code>ls</code>\n|-\n|29\n|{{w|Warren G. Harding|Warren G. Har<code>di</code>ng}}\n|<code>[lnd]i</code>\n|-\n|30\n|{{w|Calvin Coolidge|Calvin Coo<code>li</code>dge}}\n|<code>[lnd]i</code>\n|-\n|31\n|{{w|Herbert Hoover|Herbert H<code>oo</code>ver}}\n|<code>[po]o</code>\n|-\n|32\n|{{w|Franklin D. Roosevelt|Franklin D. R<code>oo</code>sevelt}}\n|<code>[po]o</code>\n|-\n|33\n|{{w|Harry S. Truman|Harry S. Tru<code>ma</code>n}}\n|<code>[mtg]a</code>\n|-\n|34\n|{{w|Dwight D. Eisenhower|Dwight D. Eise<code>nh</code>ower}}\n|<code>n[hl]</code>\n|-\n|35\n|[[John F. Kennedy|John F. Kenn<code>ed</code>y]]\n|<code>[ae]d</code>\n|-\n|36\n|{{w|Lyndon B. Johnson|Lyndon B. <code>J</code>ohnson}}\n|<code>j</code>\n|-\n|37\n|{{w|Richard Nixon|Richard <code>Ni</code>xon}}\n|<code>[lnd]i</code>\n|-\n|39\n|{{w|Jimmy Carter|Jimmy Ca<code>rt</code>er}}\n|<code>[rn]t</code>\n|-\n|40\n|{{w|Ronald Reagan|Ronald Rea<code>ga</code>n}}\n|<code>[mtg]a</code>\n|-\n|41\n|{{w|George H. W. Bush|George H. W. <code>Bu</code>sh}}\n|<code>bu</code>\n|-\n|42\n|{{w|Bill Clinton|Bill Cli<code>nt</code>on}}\n|<code>[rn]t</code>\n|-\n|43\n|{{w|George W. Bush|George W. <code>Bu</code>sh}}\n|<code>bu</code>\n|-\n|44\n|{{w|Barack Obama|Barack Oba<code>ma</code>}}\n|<code>[mtg]a</code>\n|}\n\nIn the title text, there is a long regex that is the solution of another regex golf challenge: matching the last names of all elected {{w|US presidents}}, but not their opponents. Note that the list of opponents includes some people who were previously or later became presidents, or who share a last name with someone who was president, so taken literally this is impossible. To make this work, the list of opponents must exclude any names of presidents. The regular expression itself works in a very similar way to the ''Star Wars''/''Trek'' one, including several different patterns separated by <code>|</code>. Each elected president matches one pattern while each opponent matches none.\n\nThe regex does not match either of the presidents elected since the comicâ€™s release (\"Trump\" and \"Biden\"), and thus would need to be updated. The regex does match Hillary Clinton's last name, but because a person with the same last name (Bill Clinton) was president, this isn't a mistake. There was already a losing opponent called George Clinton who ran in 1792 and 1812.\n\nFour presidents ({{w|John Tyler}}, {{w|Millard Fillmore}}, {{w|Chester A. Arthur}}, and {{w|Gerald Ford}}) are omitted because they were never ''elected'' president. Each of them became president after the resignation or death of their predecessor. (Five other presidentsâ€”Coolidge, Truman, Theodore Roosevelt, and both Andrew and Lyndon B. Johnsonâ€”also succeeded to the office, but then went on to win a later presidential election.)\n\nAnd here is a list of how many unique last names are matched by each expression:\n\n{| class=\"wikitable\"\n!Expression\n!Match count\n|-\n| <code>bu</code>\n| 3\n|-\n| <code>[rn]t</code>\n| 3\n|-\n| <code>[coy]e</code>\n| 3\n|-\n| <code>[mtg]a</code>\n| 7\n|-\n| <code>j</code>\n| 3\n|-\n| <code>iso</code>\n| 1\n|-\n| <code>n[hl]</code>\n| 2\n|-\n| <code>[ae]d</code>\n| 2\n|-\n| <code>lev</code>\n| 1\n|-\n| <code>sh</code>\n| 1\n|-\n| <code>[lnd]i</code>\n| 4\n|-\n| <code>[po]o</code>\n| 3\n|-\n| <code>ls</code>\n| 1\n|}\n\nRandall's regular expression does ''not'' match presidential opponents Pinckney, King, Clay, Cass, Scott, Douglas, McClellan, Seymour, Greeley, Tilden, Hancock, Blaine, Bryan, Parker, Hughes, Cox, Davis, Smith, Landon, Willkie, Dewey, Stevenson, Goldwater, Humphrey, McGovern, Mondale, Dukakis, Dole, Gore, Kerry, McCain, or Romney.  However, it must be modified slightly, because it ''does'' match {{w|John C. Fremont|John C. Fremo<code>nt</code>}}, the runner-up to James Buchanan in 1856, as discussed by {{w|Peter Norvig}} at [http://nbviewer.ipython.org/url/norvig.com/ipython/xkcd1313.ipynb xkcd 1313: Regex Golf]. Note that Norvig provides a small amount of Python code which actually plays regex golf with arbitrary lists, and found a shorter solution than Randall's for the ''Star Wars'' vs ''Star Trek'' game (<code>/ t|p.*e/</code>).\n\n==Transcript==\n:[Caption at top of panel:]\n:Regex golf:\n:[Megan is sitting at a laptop. Cueball is standing behind her.]\n:Megan: You try to match one group but not the other.\n:Megan: /m | [tn]|b/ matches ''Star Wars'' subtitles but not ''Star Trek''.\n:Cueball: Cool.\n\n:[Caption at top of panel:]\n:Meta-regex golf:\n:[A close-up of Megan at her laptop.]\n:Megan: So I wrote a program that plays regex golf with arbitrary lists...\n:Cueball (offscreen): Uh oh...\n\n:[Caption at top of panel:]\n:Meta-meta-regex golf:\n:[Megan typing at her laptop.]\n:Megan: ...But I lost my code, so I'm grepping for files that look like regex golf solvers.\n:[Cueball facepalming.]\n\n:[Caption at top of panel:]\n:...And beyond:\n:[Another closeup of Megan at her laptop.]\n:Megan: Really, this is all /(meta-)*regex golf/.\n:Cueball: Now you have ''infinite'' problems.\n:Megan: No, I had those already.\n\n==Trivia==\nThe idea that the winning president could be picked due to the letter structure of their name (as opposed to how well they campaigned) was the main twist in the 2006 movie {{w|Man of the Year (2006 film)|''Man of the Year''}}. Theoretically, such a 'pick' could easily used (played straight, or subverted) in [[2383: Electoral Precedent 2020]], or in a further update.<!-- although the current situation (early 2024) could not adopt it, without adding non-regex specifications to the argument (incumbant/returning/convictions/diagnosis, e.g.), given both likely options are proven already 'electable'... but might be worth reanalysing this statement once we get beyond all Primaries/surprises/etc and know for certain it's not Haley v. Harris, or whatever. Idea left open to revisit this idea at some future date when it could directly work! -->\n\n{{comic discussion}}\n\n[[Category:Comics featuring Cueball]]\n[[Category:Comics featuring Megan]]\n[[Category:Regex]]\n[[Category:Star Trek]]"
}
{
    "comic_number": 1481,
    "explanation": "{{comic\n| number    = 1481\n| date      = February 2, 2015\n| title     = API\n| image     = api.png\n| titletext = ACCESS LIMITS: Clients may maintain connections to the server for no more than 86,400 seconds per day. If you need additional time, you may contact IERS to file a request for up to one additional second.\n}}\n\n==Explanation==\nThis comic presents a web site designed for human readers as if it had an API ({{w|application programming interface}}) designed for machine-to-machine {{w|web service}}. An API is a set of instructions about a computer program, intended to be used by developers of other computer programs, so the two programs can interoperate more easily. The documentation explains how to send commands to the program, and how the output will be returned.\n\nMany web APIs are designed to return data in {{w|XML}} format. But in this case, the XML is {{w|XHTML}}, a version of the language that is used by most web pages. The \"requested data\" is the actual content (e.g., a blog post), and \"documentation\" refers (in an obscure way) to the parts of a web page that control how it looks on the screen (e.g. {{w|Cascading Style Sheets|CSS}} and perhaps JavaScript layout code). The \"documentation\" may also be {{w|Document type definition|DTD}} which tells the XML parser info about this particular {{w|XML}} format, i.e. XHTML. \n\nIn order for a program to process a generic web site designed for human viewing, the program needs to use {{w|web scraping}} techniques, which often break when the web site design changes in subtle ways that a human might never notice. Therefore, developers [http://www.rubyinside.com/ruby-gets-a-stylish-html-scraper-scrapi-140.html prefer to have proper APIs] with well-defined machine-readable formats, stable interfaces and documentation that actually describes the semantics of the data.\n\nFor example, Google has an [https://developers.google.com/youtube/v3/getting-started official API for version 3 of their YouTube web service]. But developers who don't want to hassle with the required API key or the costs associated with its use sometimes just [https://stackoverflow.com/questions/20407107/scraping-youtube-mix-playlist-id-for-a-video scrape the regular YouTube web site]. So, someone could publish this comic with a YouTube URL as a convoluted hint to developers that there is an alternative to the official API.\n\nThe API keys section is a step-by-step description of how a web page is protected with {{w|HTTP Secure}} (HTTPS). The {{w|Transport Layer Security}} (TLS) protocol uses an {{w|elliptic curve Diffieâ€“Hellman}} (ECDH) key signed using {{w|Rivest-Shamir-Adleman}} (RSA) encryption, which is stored in an {{w|X.509}} certificate. Normally, the browser or operating system does this behind the scenes, so most web developers and users do not need to know these details.\n\nThe access limits mentioned in the title text says that the API can be used for 86,400 seconds each day. At first this may appear to be a strange arbitrary number; however, it is in fact the total number of seconds in 24 hours, essentially meaning there is no limit on most days. The {{w|International Earth Rotation and Reference Systems Service}} (IERS) is the organization that decides when to add {{w|leap seconds}}, which account for slight anomalies in the Earth's rotation as compared to the {{w|mean solar day}}. These leap seconds will mean that the website is available for one extra second occasionally, although IERS decisions are based on actual Earth rotation rates, and they of course wouldn't respond to requests for leap seconds in order to lengthen the number of seconds that a web site would be available for in a given calendar day.  The API does not discuss the issue that some days have 23 or 25 hours due to {{w|Daylight saving time|daylight saving time}} in the U.S. and {{w|Summer time|summer time}} in Europe and some other places. This suggests that the web service tracks time via {{w|UTC}}.\n\n==Transcript==\n:[Cueball sitting at a desk staring at a computer screen.]\n:<big>'''API Guide'''</big>\n:Request URL format:\n:<nowiki>http://~~~.com/<username>/<item ID> </nowiki><!-- nowiki tags to avoid linking to a non-existent website -->\n\n:Server will return an XML document which contains:\n:*The requested data.\n:*Documentation describing how the data is organized spatially.\n\n:;API Keys\n:To obtain API access, contact the X.509-authenticated server and request an ECDH-RSA TLS key...\n:<hr/>\n:If you do things right, it can take people a while to realize that your \"API documentation\" is just instructions for how to look at your website.\n\n{{comic discussion}}\n[[Category:Comics featuring Cueball]]\n[[Category:Programming]]\n[[Category:Time]]"
}
{
    "comic_number": 1188,
    "explanation": "{{comic\n| number    = 1188\n| date      = March 20, 2013\n| title     = Bonding\n| image     = bonding.png\n| titletext = I'm trying to build character, but Eclipse is really confusing.\n}}\n\n==Explanation==\nThis is {{w|source code}} written in the {{w|Java (programming language)|Java programming language}} which models a parent and a child playing a {{w|Catch (game)|game of catch}}.  Normally this game is played with the parent throwing a ball to their child, who catches it and throws it back, and repeated back-and-forth. The comic title \"Bonding\" refers to the {{w|Paternal bond|building of relationship}} between the parent and the child. The joke lies in the puns using the words <code>try</code>, <code>throw</code>, <code>catch</code>, and <code>Throwable</code>.  These can refer to actions in the real-life game, but are also keywords in the Java language that are used for {{w|exception handling}}, a method of signaling error conditions and responding to them.  Also, the terms \"parent\" and \"child\" are usually interpreted more abstractly in programming, as generic terms used in hierarchical {{w|Data structure|data structures}}.\n\nThe program, as written, will {{w|Recursion (computer science)|recursively}} call the <code>aim</code> method alternately on the parent and the child indefinitely, causing each to take turns throwing and catching the <code>Ball</code> object.  Note that unlike the real game, this program actually has the same person both throwing and catching the same ball on their turn.  The ball is passed onto the other person by ''aiming'' it at them, which causes the person to both throw and catch the ball, and ''aim'' it back, perpetuating the cycle.  This program will also eventually crash with a {{w|stack overflow}} error.\n\nThe title text refers to the [http://www.eclipse.org/ Eclipse IDE], which is a tool commonly used to develop software in Java. \"Building character\" is something that you would expect a parent to do, in order to instill in his child positive traits, such as confidence and athleticism. This is possibly a reference to {{w|Calvin_and_Hobbes|Calvin and Hobbes}}, where Calvin's dad often encourages him to build character in a number of ways, including playing baseball. This is made more likely by other references combining technology with Calvin and Hobbes, such as xkcd comics [[409: Electric Skateboard (Double Comic)]], [[702: Snow Tracking]] and [[1002: Game AIs]]. However, here, \"build\" might also be a play on the term of \"{{w|Software build|building}}\" a program, while \"{{w|Character_(computing)|character}}\" refers to a data type in programming languages. It may also refer to the common notion that programming in C++ or Java builds character due to their powerful but sometimes finicky libraries.\n\n===Program description===\nTo compile this {{w|Java_(programming_language)|Java}} source code, the two [http://docs.oracle.com/javase/tutorial/java/javaOO/classdecl.html classes] would need to be in a .java file.\nThe program defines two classes (types of objects):\n#The Ball class [http://docs.oracle.com/javase/tutorial/java/IandI/subclasses.html extends] [http://docs.oracle.com/javase/7/docs/api/java/lang/Throwable.html Throwable], making it possible to use an instance of Ball in [http://docs.oracle.com/javase/tutorial/essential/exceptions/handling.html exception handling].  In English, this means \"a Ball is a kind of Throwable object\".\n#The P class, representing a Person, which contains the following members (attributes):\n#*a [http://docs.oracle.com/javase/tutorial/java/javaOO/variables.html class variable] 'target' to point to another P to aim a Ball at.\n#*a [http://docs.oracle.com/javase/tutorial/java/javaOO/constructors.html constructor] 'P' (in Java the constructor always has the same name as the class) used to create an instance of P and initialize its state (with a target). The keyword [http://docs.oracle.com/javase/tutorial/java/javaOO/thiskey.html this] refers to the current instance of P.\n#*a [http://docs.oracle.com/javase/tutorial/java/javaOO/methods.html method] 'aim' that takes an instance of Ball named 'ball' as a parameter.  This contains the code to actually throw, catch, and pass the ball onto the target.\n#*a [http://docs.oracle.com/javase/tutorial/java/javaOO/classvars.html static] method 'main' which is called when executing this class.  This is the code that sets up the game and starts the process.\n\nThe program executes in the following order:\n#The static main method is called.  It sets up the game by doing the following:\n##An instance of P named 'parent' is created without a target ({{w|Nullable_type|null}}) using the 'new' keyword.\n##Another instance of P named 'child' is created with 'parent' as its target.\n##The parent's target is assigned to be the child.  Unlike with 'child', setting the parent's target could not be done at the moment when 'parent' was created because its target (the child) has not yet been created at the time.  This is why the code for parent and child don't look alike despite this being a symmetrical setup.\n#The game begins by having the parent aim a new instance of Ball.\n#The aim method first sets up a [http://docs.oracle.com/javase/tutorial/essential/exceptions/try.html try] block to handle exceptions.  A \"try\" block is required in Java in order to \"catch\" later.\n#Next, the Ball instance 'ball' is [http://docs.oracle.com/javase/tutorial/essential/exceptions/throwing.html thrown].  This signals an exception situation and triggers the [http://docs.oracle.com/javase/tutorial/essential/exceptions/catch.html catch] block below.\n#In the catch block, the aim method of the target of the P instance is called with the Ball instance (now referred to as 'b').\n#The target now executes its own aim method, which is the same code continuing from step 3 except with the current class instance ('this') and its target switched between the parent and the child.\n\n==Transcript==\n class Ball extends Throwable {}\n class P{\n     P target;\n     P(P target) {\n         this.target = target;\n     }\n     void aim (Ball ball) {\n         try {\n             throw ball;\n         }\n         catch (Ball b) {\n             target.aim(b);\n         }\n     }\n     public static void main(String[] args) {\n         P parent = new P(null);\n         P child = new P(parent);\n         parent.target = child;\n         parent.aim(new Ball());\n     }\n }\n\n{{comic discussion}}\n[[Category:Programming]]"
}